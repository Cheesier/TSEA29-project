
masterDummy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000025b  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000138  00000000  00000000  000003fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b3  00000000  00000000  00000533  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  000006e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001bc  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000009c  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_10>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initSPI>:
#include <util/delay.h>


void initSPI() {
	/* Set MOSI SCK and /SS output*/
	DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7);
  6c:	80 eb       	ldi	r24, 0xB0	; 176
  6e:	87 bb       	out	0x17, r24	; 23
	/* SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR)|(1<<SPR0);
  70:	81 ed       	ldi	r24, 0xD1	; 209
  72:	8d b9       	out	0x0d, r24	; 13
  74:	08 95       	ret

00000076 <getTapeData>:
	
	//free(sensorData);
}

void getTapeData() {
	SPDR = 0x86;
  76:	86 e8       	ldi	r24, 0x86	; 134
  78:	8f b9       	out	0x0f, r24	; 15
	PORTB &= ~(1<<PORTB4);
  7a:	c4 98       	cbi	0x18, 4	; 24
	while(!(SPSR & (1<<SPIF)));
  7c:	77 9b       	sbis	0x0e, 7	; 14
  7e:	fe cf       	rjmp	.-4      	; 0x7c <getTapeData+0x6>
	PORTB |= (1<<PORTB4);
  80:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	8b e2       	ldi	r24, 0x2B	; 43
  84:	91 e0       	ldi	r25, 0x01	; 1
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <getTapeData+0x10>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <getTapeData+0x16>
  8c:	00 00       	nop
	
	//_delay_us(OVERHEAD_TIME);
	_delay_us(150);
	
	for(int i = 0; i < 2; i++) {
		SPDR = 0;
  8e:	1f b8       	out	0x0f, r1	; 15
		PORTB &= ~(1<<PORTB4);
  90:	c4 98       	cbi	0x18, 4	; 24
		while(!(SPSR & (1<<SPIF)));
  92:	77 9b       	sbis	0x0e, 7	; 14
  94:	fe cf       	rjmp	.-4      	; 0x92 <getTapeData+0x1c>
		PORTB |= (1<<PORTB4);
  96:	c4 9a       	sbi	0x18, 4	; 24
	
	//_delay_us(OVERHEAD_TIME);
	_delay_us(150);
	
	for(int i = 0; i < 2; i++) {
		SPDR = 0;
  98:	1f b8       	out	0x0f, r1	; 15
		PORTB &= ~(1<<PORTB4);
  9a:	c4 98       	cbi	0x18, 4	; 24
		while(!(SPSR & (1<<SPIF)));
  9c:	77 9b       	sbis	0x0e, 7	; 14
  9e:	fe cf       	rjmp	.-4      	; 0x9c <getTapeData+0x26>
		PORTB |= (1<<PORTB4);
  a0:	c4 9a       	sbi	0x18, 4	; 24
  a2:	08 95       	ret

000000a4 <main>:
	
	
}

int main(void) {
	initSPI();
  a4:	0e 94 36 00 	call	0x6c	; 0x6c <initSPI>
	//DDRB |= (1<<0);
	//DDRD &= ~(1<<2);
	//GICR |= (1<<6);
	//sei();
	while(1) {
		getTapeData();
  a8:	0e 94 3b 00 	call	0x76	; 0x76 <getTapeData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	80 e7       	ldi	r24, 0x70	; 112
  b0:	92 e0       	ldi	r25, 0x02	; 2
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0xe>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x18>
  bc:	00 00       	nop
  be:	f4 cf       	rjmp	.-24     	; 0xa8 <main+0x4>

000000c0 <__vector_10>:
		_delay_ms(1000);
		getSensorData();
	}*/
}

ISR(SPISTC_vect) {
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
	PORTB |= (1<<PORTB4);
  ca:	c4 9a       	sbi	0x18, 4	; 24
	reti(); 
  cc:	18 95       	reti
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
