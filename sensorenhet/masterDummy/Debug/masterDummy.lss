
masterDummy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001c8  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000135  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000187  00000000  00000000  000004ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001ac  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000053  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00000893  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_10>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initSPI>:


void initSPI()
{
	/* Set MOSI SCK and /SS output*/
	DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7);
  6c:	80 eb       	ldi	r24, 0xB0	; 176
  6e:	87 bb       	out	0x17, r24	; 23
	/* SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR)|(1<<SPR0);
  70:	81 ed       	ldi	r24, 0xD1	; 209
  72:	8d b9       	out	0x0d, r24	; 13
  74:	08 95       	ret

00000076 <getSensorData>:
}

void getSensorData()
{
	SPDR = 0x00;
  76:	1f b8       	out	0x0f, r1	; 15
	PORTB &= ~(1<<PORTB4);
  78:	c4 98       	cbi	0x18, 4	; 24
	while(!(SPSR & (1<<SPIF)));
  7a:	77 9b       	sbis	0x0e, 7	; 14
  7c:	fe cf       	rjmp	.-4      	; 0x7a <getSensorData+0x4>
	PORTB |= (1<<PORTB4);
  7e:	c4 9a       	sbi	0x18, 4	; 24
	uint8_t noSensors = SPDR;
  80:	2f b1       	in	r18, 0x0f	; 15
	
	//uint8_t *sensorData;
	//sensorData = (uint8_t*) malloc(noSensors*sizeof(uint8_t));
	
	for (int i = 0; i < noSensors; i++)
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	12 16       	cp	r1, r18
  86:	13 06       	cpc	r1, r19
  88:	5c f4       	brge	.+22     	; 0xa0 <getSensorData+0x2a>
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		{
			_delay_ms(10);
		}*/
		SPDR = 0x00;
  8e:	1f b8       	out	0x0f, r1	; 15
		PORTB &= ~(1<<PORTB4);
  90:	c4 98       	cbi	0x18, 4	; 24
		while(!(SPSR & (1<<SPIF)));
  92:	77 9b       	sbis	0x0e, 7	; 14
  94:	fe cf       	rjmp	.-4      	; 0x92 <getSensorData+0x1c>
		PORTB |= (1<<PORTB4);
  96:	c4 9a       	sbi	0x18, 4	; 24
	uint8_t noSensors = SPDR;
	
	//uint8_t *sensorData;
	//sensorData = (uint8_t*) malloc(noSensors*sizeof(uint8_t));
	
	for (int i = 0; i < noSensors; i++)
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	82 17       	cp	r24, r18
  9c:	93 07       	cpc	r25, r19
  9e:	bc f3       	brlt	.-18     	; 0x8e <getSensorData+0x18>
  a0:	08 95       	ret

000000a2 <main>:
	//free(sensorData);
}

int main(void)
{
	initSPI();
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <initSPI>
	
	DDRB |= (1<<0);
  a6:	b8 9a       	sbi	0x17, 0	; 23
	DDRD &= ~(1<<2);
  a8:	8a 98       	cbi	0x11, 2	; 17
	//GICR |= (1<<6);
	//sei();
	while(1)
	{
		PORTB |= (1<<0);
  aa:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	80 e7       	ldi	r24, 0x70	; 112
  b0:	92 e0       	ldi	r25, 0x02	; 2
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x10>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x1a>
  bc:	00 00       	nop
		_delay_ms(100);
		PORTB &= ~(1<<0);
  be:	c0 98       	cbi	0x18, 0	; 24
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	89 e6       	ldi	r24, 0x69	; 105
  c4:	98 e1       	ldi	r25, 0x18	; 24
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x24>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x2e>
  d0:	00 00       	nop
		_delay_ms(1000);
		getSensorData();
  d2:	0e 94 3b 00 	call	0x76	; 0x76 <getSensorData>
  d6:	e9 cf       	rjmp	.-46     	; 0xaa <main+0x8>

000000d8 <__vector_10>:
	}
}

ISR(SPISTC_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
	PORTB |= (1<<PORTB4);
  e2:	c4 9a       	sbi	0x18, 4	; 24
	reti(); 
  e4:	18 95       	reti
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
