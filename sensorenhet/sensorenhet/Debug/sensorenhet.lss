
sensorenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  00800060  00000266  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000100  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000007bd  00000000  00000000  00000396  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000549  00000000  00000000  00000b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005ad  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001f0  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000330  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000034b  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b0  00000000  00000000  00001eb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 83 00 	call	0x106	; 0x106 <main>
  74:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <initADC>:

#define WAIT_FOR_CONVERSION while(ADCSRA & (1<<ADSC)); // The function to wait for the conversion to finish


void initADC() {
	ADMUX |= (1 << REFS0) | (1<<ADLAR); // Apply 5V on AVCC, ADLAR to right align, only for testing
  7c:	87 b1       	in	r24, 0x07	; 7
  7e:	80 66       	ori	r24, 0x60	; 96
  80:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); // ADC Enabled, Prescaler of 64
  82:	86 b1       	in	r24, 0x06	; 6
  84:	86 68       	ori	r24, 0x86	; 134
  86:	86 b9       	out	0x06, r24	; 6
  88:	08 95       	ret

0000008a <readADC>:
}

uint8_t readADC(uint8_t port) {
	port &= 0x01; // Makes sure we only read port 1 or 0, the gyro is port 0, the tape sensor is port 1
	
	ADMUX = (ADMUX &= 0xF8) | port; // Clears port 0-7, to make sure there is nothing there that shouldn't be there
  8a:	97 b1       	in	r25, 0x07	; 7
  8c:	98 7f       	andi	r25, 0xF8	; 248
  8e:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (1 << REFS0) | (1<<ADLAR); // Apply 5V on AVCC, ADLAR to right align, only for testing
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); // ADC Enabled, Prescaler of 64
}

uint8_t readADC(uint8_t port) {
	port &= 0x01; // Makes sure we only read port 1 or 0, the gyro is port 0, the tape sensor is port 1
  90:	81 70       	andi	r24, 0x01	; 1
	
	ADMUX = (ADMUX &= 0xF8) | port; // Clears port 0-7, to make sure there is nothing there that shouldn't be there
  92:	98 2b       	or	r25, r24
  94:	97 b9       	out	0x07, r25	; 7
	
	ADCSRA |= (1<<ADSC); // Starts the conversion by setting ADSC to 1
  96:	36 9a       	sbi	0x06, 6	; 6
	WAIT_FOR_CONVERSION; // Waits for the conversion to finish
  98:	36 99       	sbic	0x06, 6	; 6
  9a:	fe cf       	rjmp	.-4      	; 0x98 <readADC+0xe>
	uint8_t data = ADCH;
  9c:	85 b1       	in	r24, 0x05	; 5
	
	return data;	
  9e:	08 95       	ret

000000a0 <initDistance>:
	//Wait for input from sensors
	WAIT_FOR_INPUT;
	
	//Measure length of echo signal
	START_TIMER;
	while (FRONT_HIGH || RIGHT_HIGH || BACK_HIGH || LEFT_HIGH) {
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	81 bb       	out	0x11, r24	; 17
  a4:	91 98       	cbi	0x12, 1	; 18
		if (!interrupted && !LEFT_HIGH && !done[DISTANCE_LEFT]) {
			distanceSensor[DISTANCE_LEFT] = distance;
			done[DISTANCE_LEFT] = 1;
		}
	}
	STOP_TIMER;
  a6:	10 92 60 00 	sts	0x0060, r1
  aa:	10 92 61 00 	sts	0x0061, r1
	while (FRONT_HIGH || RIGHT_HIGH || BACK_HIGH || LEFT_HIGH) {
		if (!interrupted && !FRONT_HIGH && !done[DISTANCE_FRONT]) {
			distanceSensor[DISTANCE_FRONT] = distance;
			done[DISTANCE_FRONT] = 1;
		}
		if (!interrupted && !RIGHT_HIGH && !done[DISTANCE_RIGHT]) {
  ae:	10 92 62 00 	sts	0x0062, r1
			distanceSensor[DISTANCE_RIGHT] = distance;
			done[DISTANCE_RIGHT] = 1;
		}
		if (!interrupted && !LEFT_HIGH && !done[DISTANCE_BACK]) {
  b2:	10 92 63 00 	sts	0x0063, r1
			distanceSensor[DISTANCE_BACK] = distance;
			done[DISTANCE_BACK] = 1;
		}
		if (!interrupted && !LEFT_HIGH && !done[DISTANCE_LEFT]) {
  b6:	85 b5       	in	r24, 0x25	; 37
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	85 bd       	out	0x25, r24	; 37
			distanceSensor[DISTANCE_LEFT] = distance;
			done[DISTANCE_LEFT] = 1;
		}
	}
	STOP_TIMER;
}
  bc:	89 b7       	in	r24, 0x39	; 57
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	89 bf       	out	0x39, r24	; 57
  c2:	8a e3       	ldi	r24, 0x3A	; 58
  c4:	83 bd       	out	0x23, r24	; 35
  c6:	08 95       	ret

000000c8 <__vector_3>:
  c8:	1f 92       	push	r1
	TCCR2 |= (1 << WGM21);				// Configure timer 1 for CTC mode
	TIMSK |= (1 << OCIE2);				// Enable Timer2 Output Compare Interrupt
	OCR2 = 58;							// Compare count
}

ISR(TIMER2_COMP_vect) {
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	distance = distance + 1;		//add timer count;
  d6:	80 91 64 00 	lds	r24, 0x0064
  da:	90 91 65 00 	lds	r25, 0x0065
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 65 00 	sts	0x0065, r25
  e4:	80 93 64 00 	sts	0x0064, r24
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <initSensors>:
static int tape_black = 0;
static int tape_floor = 0;

void initSensors() {	
	// Initiate the mux for the tape sensors
	DDRB |= 0x0F;
  f6:	87 b3       	in	r24, 0x17	; 23
  f8:	8f 60       	ori	r24, 0x0F	; 15
  fa:	87 bb       	out	0x17, r24	; 23
	initDistance();
  fc:	0e 94 50 00 	call	0xa0	; 0xa0 <initDistance>
	initADC();
 100:	0e 94 3e 00 	call	0x7c	; 0x7c <initADC>
 104:	08 95       	ret

00000106 <main>:
}

int main(void) {
	initSensors();
 106:	0e 94 7b 00 	call	0xf6	; 0xf6 <initSensors>
	SPI_Init();
 10a:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_Init>
	sei();
 10e:	78 94       	sei
	while(1) {
		//_delay_ms(1000);
		//updateDistance();
		readADC(0);
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 45 00 	call	0x8a	; 0x8a <readADC>
 116:	fc cf       	rjmp	.-8      	; 0x110 <main+0xa>

00000118 <SPI_Init>:
#include "SPI.h"
#include "distanceSensor.h"

// Initiates the SPI
void SPI_Init(void) {
	DDR_SPI = (1<<SPI_MISO);		// Set MISO output
 118:	80 e4       	ldi	r24, 0x40	; 64
 11a:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPIE)|(1<<SPE);		// Enable SPI Enable interrupts
 11c:	80 ec       	ldi	r24, 0xC0	; 192
 11e:	8d b9       	out	0x0d, r24	; 13
 120:	08 95       	ret

00000122 <SPI_Send>:
	return SPDR;					// Return Data Register
}

// Send over SPI
void SPI_Send(char dataout) {
	SPDR = dataout;					// Put package in Data Register
 122:	8f b9       	out	0x0f, r24	; 15
	WAIT_FOR_TRANSFER;				// Wait for transition to complete
 124:	77 9b       	sbis	0x0e, 7	; 14
 126:	fe cf       	rjmp	.-4      	; 0x124 <SPI_Send+0x2>
}
 128:	08 95       	ret

0000012a <sendDistanceSensors>:

void sendDistanceSensors(void) {
	for (int i = 0; i < SENSOR_COUNT; i++) {
		SPI_Send(distanceSensor[i]);
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 91 00 	call	0x122	; 0x122 <SPI_Send>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 91 00 	call	0x122	; 0x122 <SPI_Send>
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 91 00 	call	0x122	; 0x122 <SPI_Send>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 91 00 	call	0x122	; 0x122 <SPI_Send>
 142:	08 95       	ret

00000144 <sendTapeSensors>:
	}
}

void sendTapeSensors() {
	cli();
 144:	f8 94       	cli
	SPI_Send(getTapeData());	
 146:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <getTapeData>
 14a:	0e 94 91 00 	call	0x122	; 0x122 <SPI_Send>
	//SPI_Send(0xFF);
	sei();
 14e:	78 94       	sei
 150:	08 95       	ret

00000152 <__vector_10>:
}

ISR(SPISTC_vect) {
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	cli();
 174:	f8 94       	cli
	char msg = SPDR;
 176:	2f b1       	in	r18, 0x0f	; 15
	char header = msg >> 6;
	char size;
	msg = msg & 0x3F;
	interrupted = 1;				//Maybe useful when updating distance 
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 69 00 	sts	0x0069, r25
 180:	80 93 68 00 	sts	0x0068, r24
}

ISR(SPISTC_vect) {
	cli();
	char msg = SPDR;
	char header = msg >> 6;
 184:	82 2f       	mov	r24, r18
 186:	82 95       	swap	r24
 188:	86 95       	lsr	r24
 18a:	86 95       	lsr	r24
 18c:	83 70       	andi	r24, 0x03	; 3
	char size;
	msg = msg & 0x3F;
	interrupted = 1;				//Maybe useful when updating distance 
	if(header == 0x02) {
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	89 f4       	brne	.+34     	; 0x1b4 <__vector_10+0x62>
ISR(SPISTC_vect) {
	cli();
	char msg = SPDR;
	char header = msg >> 6;
	char size;
	msg = msg & 0x3F;
 192:	2f 73       	andi	r18, 0x3F	; 63
	interrupted = 1;				//Maybe useful when updating distance 
	if(header == 0x02) {
		switch (msg) {
 194:	25 30       	cpi	r18, 0x05	; 5
 196:	49 f0       	breq	.+18     	; 0x1aa <__vector_10+0x58>
 198:	26 30       	cpi	r18, 0x06	; 6
 19a:	51 f0       	breq	.+20     	; 0x1b0 <__vector_10+0x5e>
 19c:	21 30       	cpi	r18, 0x01	; 1
 19e:	51 f4       	brne	.+20     	; 0x1b4 <__vector_10+0x62>
			case 0x01:				//reset gyro_angle
				gyro_angle = 0;
 1a0:	10 92 67 00 	sts	0x0067, r1
 1a4:	10 92 66 00 	sts	0x0066, r1
				break;
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <__vector_10+0x62>
				break;
			case 0x04:				//off tape value
				//tape_floor = vals;
				break;
			case 0x05:				//send distance data
				sendDistanceSensors();
 1aa:	0e 94 95 00 	call	0x12a	; 0x12a <sendDistanceSensors>
				break;
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__vector_10+0x62>
			case 0x06:				//send tape data
				sendTapeSensors();
 1b0:	0e 94 a2 00 	call	0x144	; 0x144 <sendTapeSensors>
				break;
			default:
				break;
		}
	}
	sei();
 1b4:	78 94       	sei
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <getTapeData>:
		uint16_t data = readADC(0);	// PORT0 is for the tape sensor
		
		int tape_bit = convertToBit(data);
		tape_data |= (tape_bit << i);
	}*/
	PORTB &= ~(0x0F);
 1d8:	88 b3       	in	r24, 0x18	; 24
 1da:	80 7f       	andi	r24, 0xF0	; 240
 1dc:	88 bb       	out	0x18, r24	; 24
	PORTB |= 1;	
 1de:	c0 9a       	sbi	0x18, 0	; 24
	uint8_t data = readADC(0);	
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 45 00 	call	0x8a	; 0x8a <readADC>
	PORTB &= ~(0x0F);
 1e6:	98 b3       	in	r25, 0x18	; 24
 1e8:	90 7f       	andi	r25, 0xF0	; 240
 1ea:	98 bb       	out	0x18, r25	; 24
	
	//return tape_data;	
	return data;
}
 1ec:	08 95       	ret

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
