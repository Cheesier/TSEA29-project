
sensorenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000003c6  0000045a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800062  00800062  0000045c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e57  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087e  00000000  00000000  0000146b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008d0  00000000  00000000  00001ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  000025bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a1  00000000  00000000  0000290c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ac  00000000  00000000  00002dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00003459  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_3>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_10>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_14>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	32 01       	movw	r6, r4
  56:	35 01       	movw	r6, r10
  58:	38 01       	movw	r6, r16
  5a:	3b 01       	movw	r6, r22
  5c:	3e 01       	movw	r6, r28
  5e:	41 01       	movw	r8, r2
  60:	49 01       	movw	r8, r18
  62:	44 01       	movw	r8, r8

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d4 e0       	ldi	r29, 0x04	; 4
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e6 ec       	ldi	r30, 0xC6	; 198
  78:	f3 e0       	ldi	r31, 0x03	; 3
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a2 e6       	ldi	r26, 0x62	; 98
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	ab 37       	cpi	r26, 0x7B	; 123
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  9a:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <initADC>:

#define WAIT_FOR_CONVERSION while(ADCSRA & (1<<ADSC)); // The function to wait for the conversion to finish


void initADC() {
	ADMUX |= (1 << REFS0); // | (1<<ADLAR); // Apply 5V on AVCC, ADLAR to right align, only for testing
  a2:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADIE); // ADC Enabled, Prescaler of 64, interrupts enabled
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	8e 68       	ori	r24, 0x8E	; 142
  a8:	86 b9       	out	0x06, r24	; 6
  aa:	08 95       	ret

000000ac <readADC>:
}

void readADC(uint8_t port) {
	port &= 0x01; // Makes sure we only read port 1 or 0, the gyro is port 1, the tape sensor is port 0

	ADMUX = (ADMUX &= 0xF8) | port; // Clears port 0-7, to make sure there is nothing there that shouldn't be there
  ac:	97 b1       	in	r25, 0x07	; 7
  ae:	98 7f       	andi	r25, 0xF8	; 248
  b0:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (1 << REFS0); // | (1<<ADLAR); // Apply 5V on AVCC, ADLAR to right align, only for testing
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADIE); // ADC Enabled, Prescaler of 64, interrupts enabled
}

void readADC(uint8_t port) {
	port &= 0x01; // Makes sure we only read port 1 or 0, the gyro is port 1, the tape sensor is port 0
  b2:	81 70       	andi	r24, 0x01	; 1

	ADMUX = (ADMUX &= 0xF8) | port; // Clears port 0-7, to make sure there is nothing there that shouldn't be there
  b4:	98 2b       	or	r25, r24
  b6:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC); // Starts the conversion by setting ADSC to 1
  b8:	36 9a       	sbi	0x06, 6	; 6
  ba:	08 95       	ret

000000bc <getDistance>:
			STOP_TIMER;
			distanceSensors[DISTANCE_RIGHT] = distance;
			START_TIMER;
			done[DISTANCE_RIGHT] = 1;
		}
		if (!interrupted && !BACK_HIGH && !done[DISTANCE_BACK]) {
  bc:	82 e6       	ldi	r24, 0x62	; 98
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	08 95       	ret

000000c2 <initDistance>:
  c2:	82 e0       	ldi	r24, 0x02	; 2
			STOP_TIMER;
  c4:	81 bb       	out	0x11, r24	; 17
  c6:	91 98       	cbi	0x12, 1	; 18
  c8:	84 e0       	ldi	r24, 0x04	; 4
			distanceSensors[DISTANCE_BACK] = distance;
  ca:	80 93 62 00 	sts	0x0062, r24
  ce:	80 93 63 00 	sts	0x0063, r24
			START_TIMER;
  d2:	80 93 64 00 	sts	0x0064, r24
			done[DISTANCE_BACK] = 1;
  d6:	80 93 65 00 	sts	0x0065, r24
		}
		if (!interrupted && !LEFT_HIGH && !done[DISTANCE_LEFT]) {
  da:	85 b5       	in	r24, 0x25	; 37
  dc:	88 60       	ori	r24, 0x08	; 8
  de:	85 bd       	out	0x25, r24	; 37
  e0:	89 b7       	in	r24, 0x39	; 57
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	89 bf       	out	0x39, r24	; 57
  e6:	8a e3       	ldi	r24, 0x3A	; 58
  e8:	83 bd       	out	0x23, r24	; 35
  ea:	08 95       	ret

000000ec <__vector_3>:
			STOP_TIMER;
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
			distanceSensors[DISTANCE_LEFT] = distance;
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	8f 93       	push	r24
			done[DISTANCE_LEFT] = 1;
  f8:	9f 93       	push	r25
			START_TIMER;
  fa:	80 91 66 00 	lds	r24, 0x0066
  fe:	90 91 67 00 	lds	r25, 0x0067
	//Wait for input from sensors
	WAIT_FOR_INPUT;
	
	//Measure length of echo signal
	START_TIMER;
	while (FRONT_HIGH || RIGHT_HIGH || BACK_HIGH || LEFT_HIGH) {
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	90 93 67 00 	sts	0x0067, r25
 108:	80 93 66 00 	sts	0x0066, r24
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
			distanceSensors[DISTANCE_LEFT] = distance;
			done[DISTANCE_LEFT] = 1;
			START_TIMER;
		}
	}
	STOP_TIMER;
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
}
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <rotateDegrees>:

static int gyro_null_value = 0;
static int degrees_rotated = 0;
uint16_t gyro_data_done = 0;

void rotateDegrees(uint8_t degrees) {
 11a:	08 95       	ret

0000011c <returnDegreesRotated>:
}

// Return the amount of degrees the robot have currently rotated
uint8_t returnDegreesRotated() {
	return degrees_rotated;
}
 11c:	80 91 6a 00 	lds	r24, 0x006A
 120:	08 95       	ret

00000122 <resetDegreesRotated>:

void resetDegreesRotated(){
	degrees_rotated = 0;
 122:	10 92 6b 00 	sts	0x006B, r1
 126:	10 92 6a 00 	sts	0x006A, r1
 12a:	08 95       	ret

0000012c <initGyro>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	89 e6       	ldi	r24, 0x69	; 105
 130:	98 e1       	ldi	r25, 0x18	; 24
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <initGyro+0x6>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <initGyro+0x10>
 13c:	00 00       	nop
 13e:	80 91 68 00 	lds	r24, 0x0068
 142:	90 91 69 00 	lds	r25, 0x0069
 146:	99 27       	eor	r25, r25

// Wait a second to make sure that the robot is not moving
// and then read the value of the gyro to get a standard value
void initGyro() {
	_delay_ms(1000);
	gyro_null_value = getGyroData();
 148:	90 93 6d 00 	sts	0x006D, r25
 14c:	80 93 6c 00 	sts	0x006C, r24
 150:	08 95       	ret

00000152 <initSensors>:
static int tape_black = 0;
static int tape_floor = 0;

void initSensors() {
	// Initiate the mux for the tape sensors
	DDRB |= 0x0F;	
 152:	87 b3       	in	r24, 0x17	; 23
 154:	8f 60       	ori	r24, 0x0F	; 15
 156:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(0x0F);
 158:	88 b3       	in	r24, 0x18	; 24
 15a:	80 7f       	andi	r24, 0xF0	; 240
 15c:	88 bb       	out	0x18, r24	; 24
	
	// Initiate the Analog to Digital Converter
	initADC();
 15e:	0e 94 51 00 	call	0xa2	; 0xa2 <initADC>

	// Initiate the different sensors
	initDistance();
 162:	0e 94 61 00 	call	0xc2	; 0xc2 <initDistance>
	initGyro();
 166:	0e 94 96 00 	call	0x12c	; 0x12c <initGyro>
 16a:	08 95       	ret

0000016c <main>:
}

int main(void) {
	initSensors();
 16c:	0e 94 a9 00 	call	0x152	; 0x152 <initSensors>
	SPI_Init();
 170:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_Init>
	sei();
 174:	78 94       	sei
	//tape_data_done = 578;
	readADC(0);
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 56 00 	call	0xac	; 0xac <readADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0x12>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x18>
 184:	fb cf       	rjmp	.-10     	; 0x17c <main+0x10>

00000186 <SPI_Init>:
#include "distanceSensor.h"
#include "tapeSensor.h"

// Initiates the SPI
void SPI_Init(void) {
	DDR_SPI |= (1<<SPI_MISO);		// Set MISO output
 186:	be 9a       	sbi	0x17, 6	; 23
	SPCR = (1<<SPIE)|(1<<SPE)|(1<<SPR0);		// Enable SPI Enable interrupts
 188:	81 ec       	ldi	r24, 0xC1	; 193
 18a:	8d b9       	out	0x0d, r24	; 13
 18c:	08 95       	ret

0000018e <SPI_Transceive>:
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
}

char SPI_Transceive(char dataout) {
	SPDR = dataout;	
 18e:	8f b9       	out	0x0f, r24	; 15
	WAIT_FOR_TRANSFER;	
 190:	77 9b       	sbis	0x0e, 7	; 14
 192:	fe cf       	rjmp	.-4      	; 0x190 <SPI_Transceive+0x2>
	return SPDR;	
 194:	8f b1       	in	r24, 0x0f	; 15
}
 196:	08 95       	ret

00000198 <SPI_Receive>:
	SPCR = (1<<SPIE)|(1<<SPE)|(1<<SPR0);		// Enable SPI Enable interrupts
}

// Receive over SPI
char SPI_Receive(void) {				
	return SPI_Transceive(0x00);
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Transceive>
}
 19e:	08 95       	ret

000001a0 <sendDistanceSensors>:
	SPDR = dataout;	
	WAIT_FOR_TRANSFER;	
	return SPDR;	
}

void sendDistanceSensors(void) {
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
	return SPI_Transceive(0x00);
}

// Send over SPI
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
 1a8:	84 e0       	ldi	r24, 0x04	; 4
 1aa:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Transceive>
 1ae:	84 e0       	ldi	r24, 0x04	; 4
 1b0:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Transceive>

void sendDistanceSensors(void) {
	SPI_Send(0x04);
	SPI_Send(0x04);
	uint8_t *sensorData;
	sensorData = getDistance();
 1b4:	0e 94 5e 00 	call	0xbc	; 0xbc <getDistance>
 1b8:	8c 01       	movw	r16, r24
	for (int i = 0; i < SENSOR_COUNT; i++) {
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
	return SPI_Transceive(0x00);
}

// Send over SPI
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
 1be:	f8 01       	movw	r30, r16
 1c0:	81 91       	ld	r24, Z+
 1c2:	8f 01       	movw	r16, r30
 1c4:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Transceive>
void sendDistanceSensors(void) {
	SPI_Send(0x04);
	SPI_Send(0x04);
	uint8_t *sensorData;
	sensorData = getDistance();
	for (int i = 0; i < SENSOR_COUNT; i++) {
 1c8:	21 96       	adiw	r28, 0x01	; 1
 1ca:	c4 30       	cpi	r28, 0x04	; 4
 1cc:	d1 05       	cpc	r29, r1
 1ce:	b9 f7       	brne	.-18     	; 0x1be <sendDistanceSensors+0x1e>
		SPI_Send(sensorData[i]);
	}
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	08 95       	ret

000001da <sendTapeSensors>:

// Sends the most updated tape data to the huvudenhet
void sendTapeSensors() {
 1da:	cf 93       	push	r28
	return SPI_Transceive(0x00);
}

// Send over SPI
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Transceive>
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Transceive>

// Sends the most updated tape data to the huvudenhet
void sendTapeSensors() {
	SPI_Send(0x03);	
	SPI_Send(0x02);
	uint8_t highByte = (uint8_t)(tape_data_done >> 8);
 1e8:	c0 91 70 00 	lds	r28, 0x0070
	return SPI_Transceive(0x00);
}

// Send over SPI
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
 1ec:	80 91 71 00 	lds	r24, 0x0071
 1f0:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Transceive>
 1f4:	8c 2f       	mov	r24, r28
 1f6:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Transceive>
	SPI_Send(0x02);
	uint8_t highByte = (uint8_t)(tape_data_done >> 8);
	uint8_t lowByte = (uint8_t)(tape_data_done);
	SPI_Send(highByte);
	SPI_Send(lowByte);	
}
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <sendGyro>:
		}
	}
}

void sendGyro() {
	SPI_Send(returnDegreesRotated());
 1fe:	0e 94 8e 00 	call	0x11c	; 0x11c <returnDegreesRotated>
	return SPI_Transceive(0x00);
}

// Send over SPI
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
 202:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Transceive>
 206:	08 95       	ret

00000208 <__vector_10>:

void sendGyro() {
	SPI_Send(returnDegreesRotated());
}

ISR(SPISTC_vect) {	
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	2f 93       	push	r18
 214:	3f 93       	push	r19
 216:	4f 93       	push	r20
 218:	5f 93       	push	r21
 21a:	6f 93       	push	r22
 21c:	7f 93       	push	r23
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	af 93       	push	r26
 224:	bf 93       	push	r27
 226:	cf 93       	push	r28
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
	char msg = SPDR;
 22c:	cf b1       	in	r28, 0x0f	; 15
	char header = msg >> 6;
	char size = SPI_Receive();
 22e:	0e 94 cc 00 	call	0x198	; 0x198 <SPI_Receive>
	msg = msg & 0x3F;
	interrupted = 1;					// Maybe useful when updating distance
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	30 93 6f 00 	sts	0x006F, r19
 23a:	20 93 6e 00 	sts	0x006E, r18
	SPI_Send(returnDegreesRotated());
}

ISR(SPISTC_vect) {	
	char msg = SPDR;
	char header = msg >> 6;
 23e:	8c 2f       	mov	r24, r28
 240:	82 95       	swap	r24
 242:	86 95       	lsr	r24
 244:	86 95       	lsr	r24
 246:	83 70       	andi	r24, 0x03	; 3
	char size = SPI_Receive();
	msg = msg & 0x3F;
	interrupted = 1;					// Maybe useful when updating distance
	uint8_t data;
	if(header == 0x02) {
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	19 f5       	brne	.+70     	; 0x292 <__vector_10+0x8a>

ISR(SPISTC_vect) {	
	char msg = SPDR;
	char header = msg >> 6;
	char size = SPI_Receive();
	msg = msg & 0x3F;
 24c:	8c 2f       	mov	r24, r28
 24e:	8f 73       	andi	r24, 0x3F	; 63
	interrupted = 1;					// Maybe useful when updating distance
	uint8_t data;
	if(header == 0x02) {
		switch (msg) {
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	fc 01       	movw	r30, r24
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	e8 30       	cpi	r30, 0x08	; 8
 258:	f1 05       	cpc	r31, r1
 25a:	d8 f4       	brcc	.+54     	; 0x292 <__vector_10+0x8a>
 25c:	e6 5d       	subi	r30, 0xD6	; 214
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__tablejump2__>
			case 0x01:					// Reset gyro_angle
				resetDegreesRotated();
 264:	0e 94 91 00 	call	0x122	; 0x122 <resetDegreesRotated>
				break;
 268:	14 c0       	rjmp	.+40     	; 0x292 <__vector_10+0x8a>
			case 0x02:					// How much gyro rotate and who was dog
				sendGyro();
 26a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <sendGyro>
				break;
 26e:	11 c0       	rjmp	.+34     	; 0x292 <__vector_10+0x8a>
			case 0x03:					// Set on tape value
				setOnTape();
 270:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <setOnTape>
				break;
 274:	0e c0       	rjmp	.+28     	; 0x292 <__vector_10+0x8a>
			case 0x04:					// Set off tape value
				setOffTape();
 276:	0e 94 61 01 	call	0x2c2	; 0x2c2 <setOffTape>
				break;
 27a:	0b c0       	rjmp	.+22     	; 0x292 <__vector_10+0x8a>
			case 0x05:					// Send distance data
				sendDistanceSensors();
 27c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <sendDistanceSensors>
				break;
 280:	08 c0       	rjmp	.+16     	; 0x292 <__vector_10+0x8a>
			case 0x06:					// Send tape data
				sendTapeSensors();
 282:	0e 94 ed 00 	call	0x1da	; 0x1da <sendTapeSensors>
				break;
 286:	05 c0       	rjmp	.+10     	; 0x292 <__vector_10+0x8a>
			case 0x07:					// Gyro msg
				break;
			case 0x08:
				data = SPI_Receive();
 288:	0e 94 cc 00 	call	0x198	; 0x198 <SPI_Receive>
				cli();
 28c:	f8 94       	cli
				rotateDegrees(data);				
 28e:	0e 94 8d 00 	call	0x11a	; 0x11a <rotateDegrees>
				break;
			default:
				break;
		}
	}
	sei();
 292:	78 94       	sei
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	cf 91       	pop	r28
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <setOnTape>:
}

// Set on tape value for the tape sensor
void setOnTape() {
	uint8_t tape_data = getTapeData();				// Get data from the sensors
	on_tape_value = tape_data;
 2b8:	10 92 78 00 	sts	0x0078, r1
 2bc:	10 92 77 00 	sts	0x0077, r1
 2c0:	08 95       	ret

000002c2 <setOffTape>:
}

// Set off tape value for the tape sensor
void setOffTape() {
	uint8_t tape_data = getTapeData();						// Get data from the sensors
	off_tape_value = tape_data;
 2c2:	10 92 76 00 	sts	0x0076, r1
 2c6:	10 92 75 00 	sts	0x0075, r1
 2ca:	08 95       	ret

000002cc <__vector_14>:
		gyro_data_done = ADC;
		active_port = TAPE_SENSOR_PORT;
	}
}

ISR(ADC_vect) {
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	2f 93       	push	r18
 2d8:	3f 93       	push	r19
 2da:	4f 93       	push	r20
 2dc:	5f 93       	push	r21
 2de:	6f 93       	push	r22
 2e0:	7f 93       	push	r23
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
	if(active_port == TAPE_SENSOR_PORT) {		
 2ee:	80 91 79 00 	lds	r24, 0x0079
 2f2:	90 91 7a 00 	lds	r25, 0x007A
 2f6:	00 97       	sbiw	r24, 0x00	; 0
 2f8:	e9 f5       	brne	.+122    	; 0x374 <__vector_14+0xa8>
		int tape_bit = convertToBit(ADC);
 2fa:	44 b1       	in	r20, 0x04	; 4
 2fc:	55 b1       	in	r21, 0x05	; 5
		tape_data |= (tape_bit << current_tape_sensor);
 2fe:	60 91 74 00 	lds	r22, 0x0074
}

//TODO
int convertToBit(int data) {
	int bit = 0;
	if(data > tape_threshold) {
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	20 91 60 00 	lds	r18, 0x0060
 30a:	30 91 61 00 	lds	r19, 0x0061
 30e:	24 17       	cp	r18, r20
 310:	35 07       	cpc	r19, r21
 312:	14 f0       	brlt	.+4      	; 0x318 <__vector_14+0x4c>
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
}

ISR(ADC_vect) {
	if(active_port == TAPE_SENSOR_PORT) {		
		int tape_bit = convertToBit(ADC);
		tape_data |= (tape_bit << current_tape_sensor);
 318:	06 2e       	mov	r0, r22
 31a:	02 c0       	rjmp	.+4      	; 0x320 <__vector_14+0x54>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	0a 94       	dec	r0
 322:	e2 f7       	brpl	.-8      	; 0x31c <__vector_14+0x50>
 324:	20 91 72 00 	lds	r18, 0x0072
 328:	30 91 73 00 	lds	r19, 0x0073
 32c:	82 2b       	or	r24, r18
 32e:	93 2b       	or	r25, r19
 330:	90 93 73 00 	sts	0x0073, r25
 334:	80 93 72 00 	sts	0x0072, r24
		current_tape_sensor++;
 338:	21 e0       	ldi	r18, 0x01	; 1
 33a:	26 0f       	add	r18, r22
 33c:	20 93 74 00 	sts	0x0074, r18
		//tape_data_done = ADC;//
		if(current_tape_sensor == 9) {	//LED 10 not working
 340:	29 30       	cpi	r18, 0x09	; 9
 342:	21 f4       	brne	.+8      	; 0x34c <__vector_14+0x80>
			current_tape_sensor = 10;
 344:	8a e0       	ldi	r24, 0x0A	; 10
 346:	80 93 74 00 	sts	0x0074, r24
 34a:	0c c0       	rjmp	.+24     	; 0x364 <__vector_14+0x98>
		}
		if(current_tape_sensor == 11) {	
 34c:	2b 30       	cpi	r18, 0x0B	; 11
 34e:	51 f4       	brne	.+20     	; 0x364 <__vector_14+0x98>
			tape_data_done = tape_data;
 350:	90 93 71 00 	sts	0x0071, r25
 354:	80 93 70 00 	sts	0x0070, r24
			tape_data = 0;				
 358:	10 92 73 00 	sts	0x0073, r1
 35c:	10 92 72 00 	sts	0x0072, r1
			//active_port = GYRO_PORT;
			current_tape_sensor = 0;
 360:	10 92 74 00 	sts	0x0074, r1
		}
		//PORTB = (PORTB & 0xF0) | (current_tape_sensor & 0x0F); //First clears the mux, then sets it to current_tape_sensor
		//PORTB = (PORTB & 0xF0) | (1 & 0x0F); //First clears the mux, then sets it to current_tape_sensor
		PORTB = (PORTB & 0xF0) | (current_tape_sensor & 0x0F); //First clears the mux, then sets it to current_tape_sensor
 364:	88 b3       	in	r24, 0x18	; 24
 366:	90 91 74 00 	lds	r25, 0x0074
 36a:	9f 70       	andi	r25, 0x0F	; 15
 36c:	80 7f       	andi	r24, 0xF0	; 240
 36e:	89 2b       	or	r24, r25
 370:	88 bb       	out	0x18, r24	; 24
 372:	0c c0       	rjmp	.+24     	; 0x38c <__vector_14+0xc0>
	}
	else if(active_port == GYRO_PORT) {
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	51 f4       	brne	.+20     	; 0x38c <__vector_14+0xc0>
		gyro_data_done = ADC;
 378:	84 b1       	in	r24, 0x04	; 4
 37a:	95 b1       	in	r25, 0x05	; 5
 37c:	90 93 69 00 	sts	0x0069, r25
 380:	80 93 68 00 	sts	0x0068, r24
		active_port = TAPE_SENSOR_PORT;
 384:	10 92 7a 00 	sts	0x007A, r1
 388:	10 92 79 00 	sts	0x0079, r1
	}
	readADC(active_port);
 38c:	80 91 79 00 	lds	r24, 0x0079
 390:	0e 94 56 00 	call	0xac	; 0xac <readADC>
 394:	ff 91       	pop	r31
 396:	ef 91       	pop	r30
 398:	bf 91       	pop	r27
 39a:	af 91       	pop	r26
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	7f 91       	pop	r23
 3a2:	6f 91       	pop	r22
 3a4:	5f 91       	pop	r21
 3a6:	4f 91       	pop	r20
 3a8:	3f 91       	pop	r19
 3aa:	2f 91       	pop	r18
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <__tablejump2__>:
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31

000003ba <__tablejump__>:
 3ba:	05 90       	lpm	r0, Z+
 3bc:	f4 91       	lpm	r31, Z
 3be:	e0 2d       	mov	r30, r0
 3c0:	09 94       	ijmp

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
