
sensorenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  00000142  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000013d  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c9  00000000  00000000  000002e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000f0  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000167  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000092  00000000  00000000  0000065b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000006ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <initSPI>:
uint8_t sensorData [noSensors];

void initSPI()
{
	/* Set MISO output*/
	DDR_SPI = (1<<DDR_MISO);
  7c:	80 e4       	ldi	r24, 0x40	; 64
  7e:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI */
	SPCR = (1<<SPE);
  80:	8d b9       	out	0x0d, r24	; 13
  82:	08 95       	ret

00000084 <sendAll>:
}

void sendAll()
{
	int i = 0;
	SPI_DATA_REG = noSensors;
  84:	84 e0       	ldi	r24, 0x04	; 4
  86:	8f b9       	out	0x0f, r24	; 15
	WAIT_FOR_TRANSFER;
  88:	77 9b       	sbis	0x0e, 7	; 14
  8a:	fe cf       	rjmp	.-4      	; 0x88 <sendAll+0x4>
  8c:	e0 e6       	ldi	r30, 0x60	; 96
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	84 e6       	ldi	r24, 0x64	; 100
  92:	90 e0       	ldi	r25, 0x00	; 0
	
	for (; i < noSensors; i++)
	{
		SPI_DATA_REG = sensorData[i];
  94:	21 91       	ld	r18, Z+
  96:	2f b9       	out	0x0f, r18	; 15
		WAIT_FOR_TRANSFER;
  98:	77 9b       	sbis	0x0e, 7	; 14
  9a:	fe cf       	rjmp	.-4      	; 0x98 <sendAll+0x14>
{
	int i = 0;
	SPI_DATA_REG = noSensors;
	WAIT_FOR_TRANSFER;
	
	for (; i < noSensors; i++)
  9c:	e8 17       	cp	r30, r24
  9e:	f9 07       	cpc	r31, r25
  a0:	c9 f7       	brne	.-14     	; 0x94 <sendAll+0x10>
	{
		SPI_DATA_REG = sensorData[i];
		WAIT_FOR_TRANSFER;
	}
}
  a2:	08 95       	ret

000000a4 <initSensors>:

void initSensors()
{
	for (int i = 0; i < noSensors; i++)
	{
		sensorData[i] = i;
  a4:	10 92 60 00 	sts	0x0060, r1
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 93 61 00 	sts	0x0061, r24
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	80 93 62 00 	sts	0x0062, r24
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	80 93 63 00 	sts	0x0063, r24
  ba:	08 95       	ret

000000bc <main>:
	}
}

int main(void)
{
	initSPI();
  bc:	0e 94 3e 00 	call	0x7c	; 0x7c <initSPI>
	initSensors();
  c0:	0e 94 52 00 	call	0xa4	; 0xa4 <initSensors>
	while(1)
	{
		sendAll();
  c4:	0e 94 42 00 	call	0x84	; 0x84 <sendAll>
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <main+0x8>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
