
sensorenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  0000019c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000019b  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000012a  00000000  00000000  000003a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000102  00000000  00000000  000004d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ac  00000000  00000000  000005d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000019d  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000175  00000000  00000000  0000081d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000992  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  74:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <initSPI>:
static int tape_floor = 0;

void initSPI()
{
	/* Set MISO output*/
	DDR_SPI = (1<<DDR_MISO);
  7c:	80 e4       	ldi	r24, 0x40	; 64
  7e:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI */
	SPCR = (1<<SPIE)|(1<<SPE);
  80:	80 ec       	ldi	r24, 0xC0	; 192
  82:	8d b9       	out	0x0d, r24	; 13
  84:	08 95       	ret

00000086 <sendAll>:
}

void sendAll(void)
{
  86:	e2 e6       	ldi	r30, 0x62	; 98
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	86 e6       	ldi	r24, 0x66	; 102
  8c:	90 e0       	ldi	r25, 0x00	; 0
	for (int i = 0; i < noSensors; i++)
	{
		SPI_DATA_REG = sensorData[i];
  8e:	21 91       	ld	r18, Z+
  90:	2f b9       	out	0x0f, r18	; 15
		WAIT_FOR_TRANSFER;
  92:	77 9b       	sbis	0x0e, 7	; 14
  94:	fe cf       	rjmp	.-4      	; 0x92 <sendAll+0xc>
	SPCR = (1<<SPIE)|(1<<SPE);
}

void sendAll(void)
{
	for (int i = 0; i < noSensors; i++)
  96:	e8 17       	cp	r30, r24
  98:	f9 07       	cpc	r31, r25
  9a:	c9 f7       	brne	.-14     	; 0x8e <sendAll+0x8>
	{
		SPI_DATA_REG = sensorData[i];
		WAIT_FOR_TRANSFER;
	}
}
  9c:	08 95       	ret

0000009e <initSensors>:

void initSensors()
{
	for (int i = 0; i < noSensors; i++)
	{
		sensorData[i] = 129;
  9e:	81 e8       	ldi	r24, 0x81	; 129
  a0:	80 93 62 00 	sts	0x0062, r24
  a4:	80 93 63 00 	sts	0x0063, r24
  a8:	80 93 64 00 	sts	0x0064, r24
  ac:	80 93 65 00 	sts	0x0065, r24
  b0:	08 95       	ret

000000b2 <main>:
	}
}

int main(void)
{
	initSPI();
  b2:	0e 94 3e 00 	call	0x7c	; 0x7c <initSPI>
	initSensors();
  b6:	0e 94 4f 00 	call	0x9e	; 0x9e <initSensors>
	SPI_DATA_REG = noSensors; 
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	8f b9       	out	0x0f, r24	; 15
	sei();
  be:	78 94       	sei
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0xe>

000000c2 <__vector_10>:
	}
}



ISR(SPISTC_vect){
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	cli();
  e4:	f8 94       	cli
	int function = SPI_DATA_REG/* || (0<<7)|(0<<6)*/;			
  e6:	8f b1       	in	r24, 0x0f	; 15
	switch (function){
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	19 f0       	breq	.+6      	; 0xf2 <__vector_10+0x30>
  ec:	85 30       	cpi	r24, 0x05	; 5
  ee:	31 f0       	breq	.+12     	; 0xfc <__vector_10+0x3a>
  f0:	07 c0       	rjmp	.+14     	; 0x100 <__vector_10+0x3e>
		case 0x01:				//reset gyro_angle
			gyro_angle = 0;
  f2:	10 92 61 00 	sts	0x0061, r1
  f6:	10 92 60 00 	sts	0x0060, r1
			break;
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__vector_10+0x3e>
			break;
		case 0x04:				//off tape value
			//tape_floor = vals;
			break;
		case 0x05:				//send distance data
			sendAll();
  fc:	0e 94 43 00 	call	0x86	; 0x86 <sendAll>
		case 0x07:				//gyro msg
			break;
		default:
			break;
	}
	sei();
 100:	78 94       	sei
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	bf 91       	pop	r27
 108:	af 91       	pop	r26
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	7f 91       	pop	r23
 110:	6f 91       	pop	r22
 112:	5f 91       	pop	r21
 114:	4f 91       	pop	r20
 116:	3f 91       	pop	r19
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
