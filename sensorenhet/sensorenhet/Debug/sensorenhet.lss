
sensorenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000278  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800060  00800060  000002ec  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000098  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000587  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003d1  00000000  00000000  0000093b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000454  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000158  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027b  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002dd  00000000  00000000  00001533  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 36       	cpi	r26, 0x6C	; 108
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  74:	0c 94 3a 01 	jmp	0x274	; 0x274 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <updateDistance>:
#define START_TIMER TCCR2 |= (1<<CS21)
#define STOP_TIMER TCCR2 &= ~(1<<CS21)



void updateDistance() {
  7c:	ef 92       	push	r14
  7e:	ff 92       	push	r15
  80:	0f 93       	push	r16
  82:	1f 93       	push	r17
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
	uint8_t done[SENSOR_COUNT];
	for (int i = 0; i < SENSOR_COUNT; i++) {
		done[i] = 0;
  88:	60 e0       	ldi	r22, 0x00	; 0
  8a:	70 e0       	ldi	r23, 0x00	; 0
  8c:	10 e0       	ldi	r17, 0x00	; 0
  8e:	00 e0       	ldi	r16, 0x00	; 0
	}
	distance = 0;
  90:	10 92 67 00 	sts	0x0067, r1
  94:	10 92 66 00 	sts	0x0066, r1
	interrupted = 0;
  98:	10 92 65 00 	sts	0x0065, r1
  9c:	10 92 64 00 	sts	0x0064, r1
	TCNT2 = 0;
  a0:	14 bc       	out	0x24, r1	; 36
	
	//Trigger sensors
	
	SENSOR_OUTPUT |= (1<<TRIGGER);
  a2:	91 9a       	sbi	0x12, 1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	8a e1       	ldi	r24, 0x1A	; 26
  a6:	8a 95       	dec	r24
  a8:	f1 f7       	brne	.-4      	; 0xa6 <updateDistance+0x2a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <updateDistance+0x30>
	_delay_us(10);
	SENSOR_OUTPUT &= ~(1<<TRIGGER);
  ac:	91 98       	cbi	0x12, 1	; 18
	
	

	//Wait for input from sensors
	WAIT_FOR_INPUT;
  ae:	82 9b       	sbis	0x10, 2	; 16
  b0:	fe cf       	rjmp	.-4      	; 0xae <updateDistance+0x32>
	
	//Measure length of echo signal
	START_TIMER;
  b2:	85 b5       	in	r24, 0x25	; 37
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	85 bd       	out	0x25, r24	; 37
	while (FRONT_HIGH || RIGHT_HIGH || BACK_HIGH || LEFT_HIGH) {
		if (!interrupted && !FRONT_HIGH && !done[DISTANCE_FRONT]) {
  b8:	80 91 64 00 	lds	r24, 0x0064
  bc:	90 91 65 00 	lds	r25, 0x0065
			distanceSensor[DISTANCE_FRONT] = distance;
  c0:	50 91 66 00 	lds	r21, 0x0066
		if (!interrupted && !LEFT_HIGH && !done[DISTANCE_BACK]) {
			distanceSensor[DISTANCE_BACK] = distance;
			done[DISTANCE_BACK] = 1;
		}
		if (!interrupted && !LEFT_HIGH && !done[DISTANCE_LEFT]) {
			distanceSensor[DISTANCE_LEFT] = distance;
  c4:	23 e6       	ldi	r18, 0x63	; 99
  c6:	30 e0       	ldi	r19, 0x00	; 0
			done[DISTANCE_LEFT] = 1;
  c8:	41 e0       	ldi	r20, 0x01	; 1
		if (!interrupted && !RIGHT_HIGH && !done[DISTANCE_RIGHT]) {
			distanceSensor[DISTANCE_RIGHT] = distance;
			done[DISTANCE_RIGHT] = 1;
		}
		if (!interrupted && !LEFT_HIGH && !done[DISTANCE_BACK]) {
			distanceSensor[DISTANCE_BACK] = distance;
  ca:	c2 e6       	ldi	r28, 0x62	; 98
  cc:	d0 e0       	ldi	r29, 0x00	; 0
		if (!interrupted && !FRONT_HIGH && !done[DISTANCE_FRONT]) {
			distanceSensor[DISTANCE_FRONT] = distance;
			done[DISTANCE_FRONT] = 1;
		}
		if (!interrupted && !RIGHT_HIGH && !done[DISTANCE_RIGHT]) {
			distanceSensor[DISTANCE_RIGHT] = distance;
  ce:	a1 e6       	ldi	r26, 0x61	; 97
  d0:	b0 e0       	ldi	r27, 0x00	; 0
	
	//Measure length of echo signal
	START_TIMER;
	while (FRONT_HIGH || RIGHT_HIGH || BACK_HIGH || LEFT_HIGH) {
		if (!interrupted && !FRONT_HIGH && !done[DISTANCE_FRONT]) {
			distanceSensor[DISTANCE_FRONT] = distance;
  d2:	0f 2e       	mov	r0, r31
  d4:	f0 e6       	ldi	r31, 0x60	; 96
  d6:	ef 2e       	mov	r14, r31
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	ff 2e       	mov	r15, r31
  dc:	f0 2d       	mov	r31, r0
	//Wait for input from sensors
	WAIT_FOR_INPUT;
	
	//Measure length of echo signal
	START_TIMER;
	while (FRONT_HIGH || RIGHT_HIGH || BACK_HIGH || LEFT_HIGH) {
  de:	19 c0       	rjmp	.+50     	; 0x112 <updateDistance+0x96>
		if (!interrupted && !FRONT_HIGH && !done[DISTANCE_FRONT]) {
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	b9 f4       	brne	.+46     	; 0x112 <updateDistance+0x96>
  e4:	82 99       	sbic	0x10, 2	; 16
  e6:	21 c0       	rjmp	.+66     	; 0x12a <updateDistance+0xae>
  e8:	61 11       	cpse	r22, r1
  ea:	1f c0       	rjmp	.+62     	; 0x12a <updateDistance+0xae>
			distanceSensor[DISTANCE_FRONT] = distance;
  ec:	f7 01       	movw	r30, r14
  ee:	50 83       	st	Z, r21
			done[DISTANCE_FRONT] = 1;
  f0:	64 2f       	mov	r22, r20
  f2:	1b c0       	rjmp	.+54     	; 0x12a <updateDistance+0xae>
		}
		if (!interrupted && !RIGHT_HIGH && !done[DISTANCE_RIGHT]) {
  f4:	71 11       	cpse	r23, r1
  f6:	1b c0       	rjmp	.+54     	; 0x12e <updateDistance+0xb2>
			distanceSensor[DISTANCE_RIGHT] = distance;
  f8:	5c 93       	st	X, r21
			done[DISTANCE_RIGHT] = 1;
  fa:	74 2f       	mov	r23, r20
  fc:	18 c0       	rjmp	.+48     	; 0x12e <updateDistance+0xb2>
		}
		if (!interrupted && !LEFT_HIGH && !done[DISTANCE_BACK]) {
  fe:	11 11       	cpse	r17, r1
 100:	18 c0       	rjmp	.+48     	; 0x132 <updateDistance+0xb6>
			distanceSensor[DISTANCE_BACK] = distance;
 102:	58 83       	st	Y, r21
			done[DISTANCE_BACK] = 1;
 104:	14 2f       	mov	r17, r20
 106:	15 c0       	rjmp	.+42     	; 0x132 <updateDistance+0xb6>
		}
		if (!interrupted && !LEFT_HIGH && !done[DISTANCE_LEFT]) {
 108:	01 11       	cpse	r16, r1
 10a:	03 c0       	rjmp	.+6      	; 0x112 <updateDistance+0x96>
			distanceSensor[DISTANCE_LEFT] = distance;
 10c:	f9 01       	movw	r30, r18
 10e:	50 83       	st	Z, r21
			done[DISTANCE_LEFT] = 1;
 110:	04 2f       	mov	r16, r20
	//Wait for input from sensors
	WAIT_FOR_INPUT;
	
	//Measure length of echo signal
	START_TIMER;
	while (FRONT_HIGH || RIGHT_HIGH || BACK_HIGH || LEFT_HIGH) {
 112:	82 99       	sbic	0x10, 2	; 16
 114:	e5 cf       	rjmp	.-54     	; 0xe0 <updateDistance+0x64>
 116:	83 99       	sbic	0x10, 3	; 16
 118:	e3 cf       	rjmp	.-58     	; 0xe0 <updateDistance+0x64>
 11a:	84 99       	sbic	0x10, 4	; 16
 11c:	e1 cf       	rjmp	.-62     	; 0xe0 <updateDistance+0x64>
 11e:	85 99       	sbic	0x10, 5	; 16
 120:	df cf       	rjmp	.-66     	; 0xe0 <updateDistance+0x64>
		if (!interrupted && !LEFT_HIGH && !done[DISTANCE_LEFT]) {
			distanceSensor[DISTANCE_LEFT] = distance;
			done[DISTANCE_LEFT] = 1;
		}
	}
	STOP_TIMER;
 122:	85 b5       	in	r24, 0x25	; 37
 124:	8d 7f       	andi	r24, 0xFD	; 253
 126:	85 bd       	out	0x25, r24	; 37
 128:	07 c0       	rjmp	.+14     	; 0x138 <updateDistance+0xbc>
	while (FRONT_HIGH || RIGHT_HIGH || BACK_HIGH || LEFT_HIGH) {
		if (!interrupted && !FRONT_HIGH && !done[DISTANCE_FRONT]) {
			distanceSensor[DISTANCE_FRONT] = distance;
			done[DISTANCE_FRONT] = 1;
		}
		if (!interrupted && !RIGHT_HIGH && !done[DISTANCE_RIGHT]) {
 12a:	83 9b       	sbis	0x10, 3	; 16
 12c:	e3 cf       	rjmp	.-58     	; 0xf4 <updateDistance+0x78>
			distanceSensor[DISTANCE_RIGHT] = distance;
			done[DISTANCE_RIGHT] = 1;
		}
		if (!interrupted && !LEFT_HIGH && !done[DISTANCE_BACK]) {
 12e:	85 9b       	sbis	0x10, 5	; 16
 130:	e6 cf       	rjmp	.-52     	; 0xfe <updateDistance+0x82>
			distanceSensor[DISTANCE_BACK] = distance;
			done[DISTANCE_BACK] = 1;
		}
		if (!interrupted && !LEFT_HIGH && !done[DISTANCE_LEFT]) {
 132:	85 9b       	sbis	0x10, 5	; 16
 134:	e9 cf       	rjmp	.-46     	; 0x108 <updateDistance+0x8c>
 136:	ed cf       	rjmp	.-38     	; 0x112 <updateDistance+0x96>
			distanceSensor[DISTANCE_LEFT] = distance;
			done[DISTANCE_LEFT] = 1;
		}
	}
	STOP_TIMER;
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	ff 90       	pop	r15
 142:	ef 90       	pop	r14
 144:	08 95       	ret

00000146 <initDistance>:

void initDistance() {
	DDRD = (1<<TRIGGER)|(0<<ECHO_FRONT) | (0<<ECHO_RIGHT) | (0<<ECHO_BACK) | (0<<ECHO_LEFT);
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	81 bb       	out	0x11, r24	; 17
	
	SENSOR_OUTPUT &= ~(1<<TRIGGER);
 14a:	91 98       	cbi	0x12, 1	; 18
	
	for(int i = 0; i < SENSOR_COUNT; i++) {
		distanceSensor[i] = 0;
 14c:	10 92 60 00 	sts	0x0060, r1
 150:	10 92 61 00 	sts	0x0061, r1
 154:	10 92 62 00 	sts	0x0062, r1
 158:	10 92 63 00 	sts	0x0063, r1
	}
	
	TCCR2 |= (1 << WGM21);				// Configure timer 1 for CTC mode
 15c:	85 b5       	in	r24, 0x25	; 37
 15e:	88 60       	ori	r24, 0x08	; 8
 160:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1 << OCIE2);				// Enable Timer2 Output Compare Interrupt
 162:	89 b7       	in	r24, 0x39	; 57
 164:	80 68       	ori	r24, 0x80	; 128
 166:	89 bf       	out	0x39, r24	; 57
	OCR2 = 58;							// Compare count
 168:	8a e3       	ldi	r24, 0x3A	; 58
 16a:	83 bd       	out	0x23, r24	; 35
 16c:	08 95       	ret

0000016e <__vector_3>:
}

ISR(TIMER2_COMP_vect) {
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
	distance = distance + 1;		//add timer count;
 17c:	80 91 66 00 	lds	r24, 0x0066
 180:	90 91 67 00 	lds	r25, 0x0067
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	90 93 67 00 	sts	0x0067, r25
 18a:	80 93 66 00 	sts	0x0066, r24
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <initSensors>:
static int tape_black = 0;
static int tape_floor = 0;

void initSensors() {	
	// Initiate the mux for the tape sensors
	DDRB |= 0x0F;
 19c:	87 b3       	in	r24, 0x17	; 23
 19e:	8f 60       	ori	r24, 0x0F	; 15
 1a0:	87 bb       	out	0x17, r24	; 23
	initDistance();
 1a2:	0e 94 a3 00 	call	0x146	; 0x146 <initDistance>
 1a6:	08 95       	ret

000001a8 <main>:
}

int main(void) {
	initSensors();
 1a8:	0e 94 ce 00 	call	0x19c	; 0x19c <initSensors>
	SPI_Init();
 1ac:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SPI_Init>
	sei();
 1b0:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	89 e6       	ldi	r24, 0x69	; 105
 1b6:	98 e1       	ldi	r25, 0x18	; 24
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x10>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x1a>
 1c2:	00 00       	nop
	while(1) {
		_delay_ms(1000);
		updateDistance();
 1c4:	0e 94 3e 00 	call	0x7c	; 0x7c <updateDistance>
 1c8:	f4 cf       	rjmp	.-24     	; 0x1b2 <main+0xa>

000001ca <SPI_Init>:
#include "SPI.h"
#include "distanceSensor.h"

// Initiates the SPI
void SPI_Init(void) {
	DDR_SPI = (1<<SPI_MISO);		// Set MISO output
 1ca:	80 e4       	ldi	r24, 0x40	; 64
 1cc:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPIE)|(1<<SPE);				// Enable SPI Enable interrupts
 1ce:	80 ec       	ldi	r24, 0xC0	; 192
 1d0:	8d b9       	out	0x0d, r24	; 13
 1d2:	08 95       	ret

000001d4 <SPI_Send>:
	return SPDR;					// Return Data Register
}

// Send over SPI
void SPI_Send(char dataout) {
	SPDR = dataout;					// Put package in Data Register
 1d4:	8f b9       	out	0x0f, r24	; 15
	WAIT_FOR_TRANSFER;				// Wait for transition to complete
 1d6:	77 9b       	sbis	0x0e, 7	; 14
 1d8:	fe cf       	rjmp	.-4      	; 0x1d6 <SPI_Send+0x2>
}
 1da:	08 95       	ret

000001dc <sendDistanceSensors>:

void sendDistanceSensors(void) {
	for (int i = 0; i < SENSOR_COUNT; i++) {
		SPI_Send(distanceSensor[i]);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SPI_Send>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SPI_Send>
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SPI_Send>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SPI_Send>
 1f4:	08 95       	ret

000001f6 <__vector_10>:
	}
}

ISR(SPISTC_vect) {
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
	cli();
 218:	f8 94       	cli
	char msg = SPDR;
 21a:	2f b1       	in	r18, 0x0f	; 15
	char header = msg >> 6;
	char size;
	msg = msg & 0x3F;
	interrupted = 1;				//Maybe usefull when updating distance 
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 6b 00 	sts	0x006B, r25
 224:	80 93 6a 00 	sts	0x006A, r24
}

ISR(SPISTC_vect) {
	cli();
	char msg = SPDR;
	char header = msg >> 6;
 228:	82 2f       	mov	r24, r18
 22a:	82 95       	swap	r24
 22c:	86 95       	lsr	r24
 22e:	86 95       	lsr	r24
 230:	83 70       	andi	r24, 0x03	; 3
	char size;
	msg = msg & 0x3F;
	interrupted = 1;				//Maybe usefull when updating distance 
	if(header == 0x02) {
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	69 f4       	brne	.+26     	; 0x250 <__vector_10+0x5a>
ISR(SPISTC_vect) {
	cli();
	char msg = SPDR;
	char header = msg >> 6;
	char size;
	msg = msg & 0x3F;
 236:	2f 73       	andi	r18, 0x3F	; 63
	interrupted = 1;				//Maybe usefull when updating distance 
	if(header == 0x02) {
		switch (msg) {
 238:	21 30       	cpi	r18, 0x01	; 1
 23a:	19 f0       	breq	.+6      	; 0x242 <__vector_10+0x4c>
 23c:	25 30       	cpi	r18, 0x05	; 5
 23e:	31 f0       	breq	.+12     	; 0x24c <__vector_10+0x56>
 240:	07 c0       	rjmp	.+14     	; 0x250 <__vector_10+0x5a>
			case 0x01:				//reset gyro_angle
			gyro_angle = 0;
 242:	10 92 69 00 	sts	0x0069, r1
 246:	10 92 68 00 	sts	0x0068, r1
			break;
 24a:	02 c0       	rjmp	.+4      	; 0x250 <__vector_10+0x5a>
			break;
			case 0x04:				//off tape value
			//tape_floor = vals;
			break;
			case 0x05:				//send distance data
			sendDistanceSensors();
 24c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <sendDistanceSensors>
			break;
			default:
			break;
		}
	}
	sei();
 250:	78 94       	sei
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	7f 91       	pop	r23
 260:	6f 91       	pop	r22
 262:	5f 91       	pop	r21
 264:	4f 91       	pop	r20
 266:	3f 91       	pop	r19
 268:	2f 91       	pop	r18
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>
