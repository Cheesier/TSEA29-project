
sensorenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800060  00800060  0000025e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000080  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004f9  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002f7  00000000  00000000  00000807  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000039d  00000000  00000000  00000afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000144  00000000  00000000  00000e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027e  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000309  00000000  00000000  0000125e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00001567  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 36       	cpi	r26, 0x6C	; 108
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  74:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_3>:
		if (!interrupted && !FRONT_HIGH && !done[DISTANCE_FRONT]) {
			distanceSensor[DISTANCE_FRONT] = distance;
			done[DISTANCE_FRONT] = 1;
		}
		if (!interrupted && !RIGHT_HIGH && !done[DISTANCE_RIGHT]) {
			distanceSensor[DISTANCE_RIGHT] = distance;
  7c:	1f 92       	push	r1
			done[DISTANCE_RIGHT] = 1;
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
		}
		if (!interrupted && !LEFT_HIGH && !done[DISTANCE_BACK]) {
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
			distanceSensor[DISTANCE_BACK] = distance;
  86:	8f 93       	push	r24
			done[DISTANCE_BACK] = 1;
  88:	9f 93       	push	r25
  8a:	80 91 60 00 	lds	r24, 0x0060
		}
		if (!interrupted && !LEFT_HIGH && !done[DISTANCE_LEFT]) {
  8e:	90 91 61 00 	lds	r25, 0x0061
			distanceSensor[DISTANCE_LEFT] = distance;
  92:	01 96       	adiw	r24, 0x01	; 1
			done[DISTANCE_LEFT] = 1;
  94:	90 93 61 00 	sts	0x0061, r25
	//Wait for input from sensors
	WAIT_FOR_INPUT;
	
	//Measure length of echo signal
	START_TIMER;
	while (FRONT_HIGH || RIGHT_HIGH || BACK_HIGH || LEFT_HIGH) {
  98:	80 93 60 00 	sts	0x0060, r24
  9c:	83 e0       	ldi	r24, 0x03	; 3
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <__vector_3+0x22>
  a2:	00 00       	nop
  a4:	9f 91       	pop	r25
		if (!interrupted && !LEFT_HIGH && !done[DISTANCE_LEFT]) {
			distanceSensor[DISTANCE_LEFT] = distance;
			done[DISTANCE_LEFT] = 1;
		}
	}
	STOP_TIMER;
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
	while (FRONT_HIGH || RIGHT_HIGH || BACK_HIGH || LEFT_HIGH) {
		if (!interrupted && !FRONT_HIGH && !done[DISTANCE_FRONT]) {
			distanceSensor[DISTANCE_FRONT] = distance;
			done[DISTANCE_FRONT] = 1;
		}
		if (!interrupted && !RIGHT_HIGH && !done[DISTANCE_RIGHT]) {
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <initSPI>:
static int sens_timer_count = 0;
static int interrupted = 0;

void initSPI() {
	/* Set MISO output*/
	DDR_SPI = (1<<DDR_MISO);
  b2:	80 e4       	ldi	r24, 0x40	; 64
  b4:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI */
	SPCR = (1<<SPIE)|(1<<SPE);
  b6:	80 ec       	ldi	r24, 0xC0	; 192
  b8:	8d b9       	out	0x0d, r24	; 13
  ba:	08 95       	ret

000000bc <mesureAGA>:
}

void mesureAGA(void) {
	sens_timer_count = 0;
  bc:	10 92 65 00 	sts	0x0065, r1
  c0:	10 92 64 00 	sts	0x0064, r1
	interrupted = 0;
  c4:	10 92 63 00 	sts	0x0063, r1
  c8:	10 92 62 00 	sts	0x0062, r1
	uint8_t mask = (1<<PORTD1);
	TCNT2 = 0;
  cc:	14 bc       	out	0x24, r1	; 36
	PORTD |= (1<<PORTD2);
  ce:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8a e1       	ldi	r24, 0x1A	; 26
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <mesureAGA+0x16>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <mesureAGA+0x1c>
	_delay_us(10);
	PORTD &= ~(1<<PORTD2);
  d8:	92 98       	cbi	0x12, 2	; 18
	//PORTB |= (1<<0);
	
	while(!(PIND &(1<<PIND1))){
  da:	81 9b       	sbis	0x10, 1	; 16
  dc:	fe cf       	rjmp	.-4      	; 0xda <mesureAGA+0x1e>
			//PORTB |= (1<<0);
	}
	TCCR2 |= (1<<CS21);
  de:	85 b5       	in	r24, 0x25	; 37
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	85 bd       	out	0x25, r24	; 37
	while((PIND &(1<<PIND1))){
  e4:	81 99       	sbic	0x10, 1	; 16
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <mesureAGA+0x28>
		//PORTB |= (1<<0);
	}
	TCCR2 &= ~(1<<CS21);
  e8:	85 b5       	in	r24, 0x25	; 37
  ea:	8d 7f       	andi	r24, 0xFD	; 253
  ec:	85 bd       	out	0x25, r24	; 37
	//PORTB &= ~(1<<0);
	if(!interrupted) {
  ee:	80 91 62 00 	lds	r24, 0x0062
  f2:	90 91 63 00 	lds	r25, 0x0063
  f6:	89 2b       	or	r24, r25
  f8:	21 f4       	brne	.+8      	; 0x102 <mesureAGA+0x46>
		sensorData[0] = sens_timer_count;
  fa:	80 91 64 00 	lds	r24, 0x0064
  fe:	80 93 68 00 	sts	0x0068, r24
 102:	08 95       	ret

00000104 <sendAll>:
	}
}

void sendAll(void) {
 104:	e8 e6       	ldi	r30, 0x68	; 104
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	8c e6       	ldi	r24, 0x6C	; 108
 10a:	90 e0       	ldi	r25, 0x00	; 0
	for (int i = 0; i < noSensors; i++) {
		SPI_DATA_REG = sensorData[i];
 10c:	21 91       	ld	r18, Z+
 10e:	2f b9       	out	0x0f, r18	; 15
		WAIT_FOR_TRANSFER;
 110:	77 9b       	sbis	0x0e, 7	; 14
 112:	fe cf       	rjmp	.-4      	; 0x110 <sendAll+0xc>
		sensorData[0] = sens_timer_count;
	}
}

void sendAll(void) {
	for (int i = 0; i < noSensors; i++) {
 114:	e8 17       	cp	r30, r24
 116:	f9 07       	cpc	r31, r25
 118:	c9 f7       	brne	.-14     	; 0x10c <sendAll+0x8>
		SPI_DATA_REG = sensorData[i];
		WAIT_FOR_TRANSFER;
	}
}
 11a:	08 95       	ret

0000011c <initSensors>:

void initSensors() {
	for (int i = 0; i < noSensors; i++) {
		sensorData[i] = 129;
 11c:	81 e8       	ldi	r24, 0x81	; 129
 11e:	80 93 68 00 	sts	0x0068, r24
 122:	80 93 69 00 	sts	0x0069, r24
 126:	80 93 6a 00 	sts	0x006A, r24
 12a:	80 93 6b 00 	sts	0x006B, r24
	}
	
	// Initiate the mux for the tape sensors
	DDRB |= 0x0F;
 12e:	87 b3       	in	r24, 0x17	; 23
 130:	8f 60       	ori	r24, 0x0F	; 15
 132:	87 bb       	out	0x17, r24	; 23
	// Initiate the distance sensors
	DDRD = (0<<PORTD1) | (1<<PORTD2);
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	81 bb       	out	0x11, r24	; 17
 138:	08 95       	ret

0000013a <initSensorTimer>:
}

void initSensorTimer() {
	TCCR2 |= (1 << WGM21);				// Configure timer 1 for CTC mode
 13a:	85 b5       	in	r24, 0x25	; 37
 13c:	88 60       	ori	r24, 0x08	; 8
 13e:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1 << OCIE2);				// Enable Timer2 Output Compare Interrupt
 140:	89 b7       	in	r24, 0x39	; 57
 142:	80 68       	ori	r24, 0x80	; 128
 144:	89 bf       	out	0x39, r24	; 57
	//TIFR  |= 1<<TOV2;						// Clear TOV2/ clear pending interrupts
	OCR2 = 58;							// Compare count
 146:	8a e3       	ldi	r24, 0x3A	; 58
 148:	83 bd       	out	0x23, r24	; 35
 14a:	08 95       	ret

0000014c <main>:
	//TCCR2 |= (1<<CS21);					// no prescale and speed = systemclock
	
}

int main(void) {
	initSensorTimer();
 14c:	0e 94 9d 00 	call	0x13a	; 0x13a <initSensorTimer>
	initSPI();
 150:	0e 94 59 00 	call	0xb2	; 0xb2 <initSPI>
	initSensors();
 154:	0e 94 8e 00 	call	0x11c	; 0x11c <initSensors>
	DDRB |= (1<<0);
 158:	b8 9a       	sbi	0x17, 0	; 23
	SPI_DATA_REG = noSensors; 
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	8f b9       	out	0x0f, r24	; 15
	sei();
 15e:	78 94       	sei
	while(1) {
		mesureAGA();
 160:	0e 94 5e 00 	call	0xbc	; 0xbc <mesureAGA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	89 e6       	ldi	r24, 0x69	; 105
 168:	98 e1       	ldi	r25, 0x18	; 24
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0x1e>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x28>
 174:	00 00       	nop
 176:	f4 cf       	rjmp	.-24     	; 0x160 <main+0x14>

00000178 <__vector_10>:
	}
}



ISR(SPISTC_vect) {
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	2f 93       	push	r18
 184:	3f 93       	push	r19
 186:	4f 93       	push	r20
 188:	5f 93       	push	r21
 18a:	6f 93       	push	r22
 18c:	7f 93       	push	r23
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	af 93       	push	r26
 194:	bf 93       	push	r27
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
	cli();
 19a:	f8 94       	cli
	interrupted = 1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 63 00 	sts	0x0063, r25
 1a4:	80 93 62 00 	sts	0x0062, r24
	int function = SPI_DATA_REG/* || (0<<7)|(0<<6)*/;			
 1a8:	8f b1       	in	r24, 0x0f	; 15
	switch (function) {
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <__vector_10+0x3c>
 1ae:	85 30       	cpi	r24, 0x05	; 5
 1b0:	31 f0       	breq	.+12     	; 0x1be <__vector_10+0x46>
 1b2:	07 c0       	rjmp	.+14     	; 0x1c2 <__vector_10+0x4a>
		case 0x01:				//reset gyro_angle
			gyro_angle = 0;
 1b4:	10 92 67 00 	sts	0x0067, r1
 1b8:	10 92 66 00 	sts	0x0066, r1
			break;
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__vector_10+0x4a>
			break;
		case 0x04:				//off tape value
			//tape_floor = vals;
			break;
		case 0x05:				//send distance data
			sendAll();
 1be:	0e 94 82 00 	call	0x104	; 0x104 <sendAll>
		case 0x07:				//gyro msg
			break;
		default:
			break;
	}
	sei();
 1c2:	78 94       	sei
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	bf 91       	pop	r27
 1ca:	af 91       	pop	r26
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	7f 91       	pop	r23
 1d2:	6f 91       	pop	r22
 1d4:	5f 91       	pop	r21
 1d6:	4f 91       	pop	r20
 1d8:	3f 91       	pop	r19
 1da:	2f 91       	pop	r18
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
