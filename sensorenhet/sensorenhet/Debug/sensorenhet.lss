
Sensorenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000015  00800060  00800060  00000434  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000188  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000eb9  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000083e  00000000  00000000  000014a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008a2  00000000  00000000  00001ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000035c  00000000  00000000  00002588  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000047c  00000000  00000000  000028e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000060f  00000000  00000000  00002d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000128  00000000  00000000  0000336f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  8a:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initADC>:

#define WAIT_FOR_CONVERSION while(ADCSRA & (1<<ADSC)); // The function to wait for the conversion to finish


void initADC() {
	ADMUX |= (1 << REFS0); // | (1<<ADLAR); // Apply 5V on AVCC, ADLAR to right align, only for testing
  92:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);// | (1 << ADIE); // ADC Enabled, Prescaler of 64, interrupts enabled
  94:	86 b1       	in	r24, 0x06	; 6
  96:	86 68       	ori	r24, 0x86	; 134
  98:	86 b9       	out	0x06, r24	; 6
  9a:	08 95       	ret

0000009c <readADC>:
}

void readADC(uint8_t port) {
	port &= 0x01; // Makes sure we only read port 1 or 0, the gyro is port 1, the tape sensor is port 0

	ADMUX = (ADMUX &= 0xF8) | port; // Clears port 0-7, to make sure there is nothing there that shouldn't be there
  9c:	97 b1       	in	r25, 0x07	; 7
  9e:	98 7f       	andi	r25, 0xF8	; 248
  a0:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (1 << REFS0); // | (1<<ADLAR); // Apply 5V on AVCC, ADLAR to right align, only for testing
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);// | (1 << ADIE); // ADC Enabled, Prescaler of 64, interrupts enabled
}

void readADC(uint8_t port) {
	port &= 0x01; // Makes sure we only read port 1 or 0, the gyro is port 1, the tape sensor is port 0
  a2:	81 70       	andi	r24, 0x01	; 1

	ADMUX = (ADMUX &= 0xF8) | port; // Clears port 0-7, to make sure there is nothing there that shouldn't be there
  a4:	98 2b       	or	r25, r24
  a6:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC); // Starts the conversion by setting ADSC to 1
  a8:	36 9a       	sbi	0x06, 6	; 6
	WAIT_FOR_CONVERSION; // Waits for the conversion to finish
  aa:	36 99       	sbic	0x06, 6	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <readADC+0xe>
	//uint8_t data = ADCH;

	//return data;
  ae:	08 95       	ret

000000b0 <getDistance>:
			STOP_TIMER;
			distanceSensors[DISTANCE_RIGHT] = distance;
			START_TIMER;
			done[DISTANCE_RIGHT] = 1;
		}
		if (!interrupted && !BACK_HIGH && !done[DISTANCE_BACK]) {
  b0:	80 e6       	ldi	r24, 0x60	; 96
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	08 95       	ret

000000b6 <initDistance>:
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	81 bb       	out	0x11, r24	; 17
  ba:	91 98       	cbi	0x12, 1	; 18
  bc:	84 e0       	ldi	r24, 0x04	; 4
  be:	80 93 60 00 	sts	0x0060, r24
  c2:	80 93 61 00 	sts	0x0061, r24
			STOP_TIMER;
  c6:	80 93 62 00 	sts	0x0062, r24
			distanceSensors[DISTANCE_BACK] = distance;
  ca:	80 93 63 00 	sts	0x0063, r24
  ce:	85 b5       	in	r24, 0x25	; 37
			START_TIMER;
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	85 bd       	out	0x25, r24	; 37
  d4:	89 b7       	in	r24, 0x39	; 57
			done[DISTANCE_BACK] = 1;
  d6:	80 68       	ori	r24, 0x80	; 128
		}
		if (!interrupted && !LEFT_HIGH && !done[DISTANCE_LEFT]) {
  d8:	89 bf       	out	0x39, r24	; 57
  da:	8a e3       	ldi	r24, 0x3A	; 58
  dc:	83 bd       	out	0x23, r24	; 35
  de:	08 95       	ret

000000e0 <__vector_3>:
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
			STOP_TIMER;
  ec:	9f 93       	push	r25
  ee:	80 91 64 00 	lds	r24, 0x0064
			distanceSensors[DISTANCE_LEFT] = distance;
  f2:	90 91 65 00 	lds	r25, 0x0065
  f6:	01 96       	adiw	r24, 0x01	; 1
			done[DISTANCE_LEFT] = 1;
  f8:	90 93 65 00 	sts	0x0065, r25
			START_TIMER;
  fc:	80 93 64 00 	sts	0x0064, r24
	//Wait for input from sensors
	WAIT_FOR_INPUT;
	
	//Measure length of echo signal
	START_TIMER;
	while (FRONT_HIGH || RIGHT_HIGH || BACK_HIGH || LEFT_HIGH) {
 100:	8a e1       	ldi	r24, 0x1A	; 26
 102:	8a 95       	dec	r24
 104:	f1 f7       	brne	.-4      	; 0x102 <__vector_3+0x22>
 106:	00 c0       	rjmp	.+0      	; 0x108 <__vector_3+0x28>
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
			distanceSensors[DISTANCE_LEFT] = distance;
			done[DISTANCE_LEFT] = 1;
			START_TIMER;
		}
	}
	STOP_TIMER;
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <returnDegreesRotated>:
}

// Return the amount of degrees the robot have currently rotated
uint8_t returnDegreesRotated() {
	return degrees_rotated;
}
 116:	80 91 66 00 	lds	r24, 0x0066
 11a:	08 95       	ret

0000011c <resetDegreesRotated>:

void resetDegreesRotated(){
	degrees_rotated = 0;
 11c:	10 92 67 00 	sts	0x0067, r1
 120:	10 92 66 00 	sts	0x0066, r1
 124:	08 95       	ret

00000126 <initGyro>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	89 e6       	ldi	r24, 0x69	; 105
 12a:	98 e1       	ldi	r25, 0x18	; 24
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <initGyro+0x6>
 134:	00 c0       	rjmp	.+0      	; 0x136 <initGyro+0x10>
 136:	00 00       	nop
 138:	08 95       	ret

0000013a <initSensors>:
static int tape_floor = 0;

void initSensors() {
	// Initiate the mux for the tape sensors

	DDRB |= 0x0F;
 13a:	87 b3       	in	r24, 0x17	; 23
 13c:	8f 60       	ori	r24, 0x0F	; 15
 13e:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(0x0F);
 140:	88 b3       	in	r24, 0x18	; 24
 142:	80 7f       	andi	r24, 0xF0	; 240
 144:	88 bb       	out	0x18, r24	; 24

	// Initiate the Analog to Digital Converter
	initADC();
 146:	0e 94 49 00 	call	0x92	; 0x92 <initADC>

	// Initiate the different sensors
	initDistance();
 14a:	0e 94 5b 00 	call	0xb6	; 0xb6 <initDistance>
	initGyro();
 14e:	0e 94 93 00 	call	0x126	; 0x126 <initGyro>
 152:	08 95       	ret

00000154 <main>:
}

int main(void) {
	initSensors();
 154:	0e 94 9d 00 	call	0x13a	; 0x13a <initSensors>
	SPI_Init();
 158:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Init>
	sei();
 15c:	78 94       	sei
	//tape_data_done = 578;
	//readADC(0);
	while(1) {
		readADC(0);
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 4e 00 	call	0x9c	; 0x9c <readADC>
 164:	8f e6       	ldi	r24, 0x6F	; 111
 166:	97 e1       	ldi	r25, 0x17	; 23
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0x14>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x1a>
 16e:	00 00       	nop
		_delay_ms(3);
		//updateDistance();
		//receiveMessage();
		//readADC(1);
		pollTapeData();
 170:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <pollTapeData>
 174:	f4 cf       	rjmp	.-24     	; 0x15e <main+0xa>

00000176 <SPI_Init>:
#include "distanceSensor.h"
#include "tapeSensor.h"

// Initiates the SPI
void SPI_Init(void) {
	DDR_SPI |= (1<<SPI_MISO);					// Set MISO output
 176:	be 9a       	sbi	0x17, 6	; 23
	SPCR = (1<<SPIE)|(1<<SPE)|(1<<SPR0);		// Enable SPI Enable interrupts
 178:	81 ec       	ldi	r24, 0xC1	; 193
 17a:	8d b9       	out	0x0d, r24	; 13
 17c:	08 95       	ret

0000017e <SPI_Transceive>:
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
}

char SPI_Transceive(char dataout) {
	SPDR = dataout;
 17e:	8f b9       	out	0x0f, r24	; 15
	WAIT_FOR_TRANSFER;
 180:	77 9b       	sbis	0x0e, 7	; 14
 182:	fe cf       	rjmp	.-4      	; 0x180 <SPI_Transceive+0x2>
	return SPDR;
 184:	8f b1       	in	r24, 0x0f	; 15
}
 186:	08 95       	ret

00000188 <SPI_Receive>:
	SPCR = (1<<SPIE)|(1<<SPE)|(1<<SPR0);		// Enable SPI Enable interrupts
}

// Receive over SPI
char SPI_Receive(void) {
	return SPI_Transceive(0x00);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 bf 00 	call	0x17e	; 0x17e <SPI_Transceive>
}
 18e:	08 95       	ret

00000190 <sendDistanceSensors>:
	SPDR = dataout;
	WAIT_FOR_TRANSFER;
	return SPDR;
}

void sendDistanceSensors(void) {
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
	return SPI_Transceive(0x00);
}

// Send over SPI
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
 198:	84 e0       	ldi	r24, 0x04	; 4
 19a:	0e 94 bf 00 	call	0x17e	; 0x17e <SPI_Transceive>
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	0e 94 bf 00 	call	0x17e	; 0x17e <SPI_Transceive>

void sendDistanceSensors(void) {
	SPI_Send(0x04);
	SPI_Send(0x04);
	uint8_t *sensorData;
	sensorData = getDistance();
 1a4:	0e 94 58 00 	call	0xb0	; 0xb0 <getDistance>
 1a8:	8c 01       	movw	r16, r24
	for (int i = 0; i < SENSOR_COUNT; i++) {
 1aa:	c0 e0       	ldi	r28, 0x00	; 0
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
	return SPI_Transceive(0x00);
}

// Send over SPI
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
 1ae:	f8 01       	movw	r30, r16
 1b0:	81 91       	ld	r24, Z+
 1b2:	8f 01       	movw	r16, r30
 1b4:	0e 94 bf 00 	call	0x17e	; 0x17e <SPI_Transceive>
void sendDistanceSensors(void) {
	SPI_Send(0x04);
	SPI_Send(0x04);
	uint8_t *sensorData;
	sensorData = getDistance();
	for (int i = 0; i < SENSOR_COUNT; i++) {
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	c4 30       	cpi	r28, 0x04	; 4
 1bc:	d1 05       	cpc	r29, r1
 1be:	b9 f7       	brne	.-18     	; 0x1ae <sendDistanceSensors+0x1e>
		SPI_Send(sensorData[i]);
	}
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <sendTapeSensors>:

void sendTapeSensors() {
 1ca:	cf 93       	push	r28
	return SPI_Transceive(0x00);
}

// Send over SPI
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	0e 94 bf 00 	call	0x17e	; 0x17e <SPI_Transceive>
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	0e 94 bf 00 	call	0x17e	; 0x17e <SPI_Transceive>
void sendTapeSensors() {
	SPI_Send(0x03);
	SPI_Send(0x02);

	//SPI_Send(getTapeData());
	uint8_t highByte = (uint8_t)(tape_data_done >> 8);
 1d8:	c0 91 6a 00 	lds	r28, 0x006A
	return SPI_Transceive(0x00);
}

// Send over SPI
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
 1dc:	80 91 6b 00 	lds	r24, 0x006B
 1e0:	0e 94 bf 00 	call	0x17e	; 0x17e <SPI_Transceive>
 1e4:	8c 2f       	mov	r24, r28
 1e6:	0e 94 bf 00 	call	0x17e	; 0x17e <SPI_Transceive>
	uint8_t highByte = (uint8_t)(tape_data_done >> 8);
	uint8_t lowByte = (uint8_t)(tape_data_done);
	SPI_Send(highByte);
	SPI_Send(lowByte);
	//SPI_Send(0xFF);
}
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <sendGyro>:
		}
	}
}

void sendGyro() {
	SPI_Send(returnDegreesRotated());
 1ee:	0e 94 8b 00 	call	0x116	; 0x116 <returnDegreesRotated>
	return SPI_Transceive(0x00);
}

// Send over SPI
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
 1f2:	0e 94 bf 00 	call	0x17e	; 0x17e <SPI_Transceive>
 1f6:	08 95       	ret

000001f8 <__vector_10>:

void sendGyro() {
	SPI_Send(returnDegreesRotated());
}

ISR(SPISTC_vect) {
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	2f 93       	push	r18
 204:	3f 93       	push	r19
 206:	4f 93       	push	r20
 208:	5f 93       	push	r21
 20a:	6f 93       	push	r22
 20c:	7f 93       	push	r23
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
 216:	cf 93       	push	r28
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
	char msg = SPDR;
 21c:	cf b1       	in	r28, 0x0f	; 15
	char header = msg >> 6;
	char size = SPI_Receive();
 21e:	0e 94 c4 00 	call	0x188	; 0x188 <SPI_Receive>
	msg = msg & 0x3F;
	interrupted = 1;					// Maybe useful when updating distance
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	90 93 69 00 	sts	0x0069, r25
 22a:	80 93 68 00 	sts	0x0068, r24
	SPI_Send(returnDegreesRotated());
}

ISR(SPISTC_vect) {
	char msg = SPDR;
	char header = msg >> 6;
 22e:	8c 2f       	mov	r24, r28
 230:	82 95       	swap	r24
 232:	86 95       	lsr	r24
 234:	86 95       	lsr	r24
 236:	83 70       	andi	r24, 0x03	; 3
	char size = SPI_Receive();
	msg = msg & 0x3F;
	interrupted = 1;					// Maybe useful when updating distance
	if(header == 0x02) {
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	01 f5       	brne	.+64     	; 0x27c <__vector_10+0x84>

ISR(SPISTC_vect) {
	char msg = SPDR;
	char header = msg >> 6;
	char size = SPI_Receive();
	msg = msg & 0x3F;
 23c:	cf 73       	andi	r28, 0x3F	; 63
	interrupted = 1;					// Maybe useful when updating distance
	if(header == 0x02) {
		switch (msg) {
 23e:	c3 30       	cpi	r28, 0x03	; 3
 240:	91 f0       	breq	.+36     	; 0x266 <__vector_10+0x6e>
 242:	28 f4       	brcc	.+10     	; 0x24e <__vector_10+0x56>
 244:	c1 30       	cpi	r28, 0x01	; 1
 246:	49 f0       	breq	.+18     	; 0x25a <__vector_10+0x62>
 248:	c2 30       	cpi	r28, 0x02	; 2
 24a:	51 f0       	breq	.+20     	; 0x260 <__vector_10+0x68>
 24c:	17 c0       	rjmp	.+46     	; 0x27c <__vector_10+0x84>
 24e:	c5 30       	cpi	r28, 0x05	; 5
 250:	81 f0       	breq	.+32     	; 0x272 <__vector_10+0x7a>
 252:	60 f0       	brcs	.+24     	; 0x26c <__vector_10+0x74>
 254:	c6 30       	cpi	r28, 0x06	; 6
 256:	81 f0       	breq	.+32     	; 0x278 <__vector_10+0x80>
 258:	11 c0       	rjmp	.+34     	; 0x27c <__vector_10+0x84>
			case 0x01:					// Reset gyro angle
				resetDegreesRotated();
 25a:	0e 94 8e 00 	call	0x11c	; 0x11c <resetDegreesRotated>
				break;
 25e:	0e c0       	rjmp	.+28     	; 0x27c <__vector_10+0x84>
			case 0x02:					// How much gyro rotate and who was dog
				sendGyro();
 260:	0e 94 f7 00 	call	0x1ee	; 0x1ee <sendGyro>
				break;
 264:	0b c0       	rjmp	.+22     	; 0x27c <__vector_10+0x84>
			case 0x03:					// Set on tape value
				setOnTape();
 266:	0e 94 50 01 	call	0x2a0	; 0x2a0 <setOnTape>
				break;
 26a:	08 c0       	rjmp	.+16     	; 0x27c <__vector_10+0x84>
			case 0x04:					// Set off tape value
				setOffTape();
 26c:	0e 94 55 01 	call	0x2aa	; 0x2aa <setOffTape>
				break;
 270:	05 c0       	rjmp	.+10     	; 0x27c <__vector_10+0x84>
			case 0x05:					// Send distance data
				sendDistanceSensors();
 272:	0e 94 c8 00 	call	0x190	; 0x190 <sendDistanceSensors>
				break;
 276:	02 c0       	rjmp	.+4      	; 0x27c <__vector_10+0x84>
			case 0x06:					// Send tape data
				sendTapeSensors();
 278:	0e 94 e5 00 	call	0x1ca	; 0x1ca <sendTapeSensors>
				break;
			default:
				break;
		}
	}
 27c:	ff 91       	pop	r31
 27e:	ef 91       	pop	r30
 280:	cf 91       	pop	r28
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <setOnTape>:
}

// Set on tape value for the tape sensor
void setOnTape() {
	uint8_t tape_data = getTapeData();				// Get data from the sensors
	on_tape = tape_data;
 2a0:	10 92 70 00 	sts	0x0070, r1
 2a4:	10 92 6f 00 	sts	0x006F, r1
 2a8:	08 95       	ret

000002aa <setOffTape>:
}

// Set off tape value for the tape sensor
void setOffTape() {
	uint8_t tape_data = getTapeData();						// Get data from the sensors
	off_tape = tape_data;
 2aa:	10 92 6e 00 	sts	0x006E, r1
 2ae:	10 92 6d 00 	sts	0x006D, r1
 2b2:	08 95       	ret

000002b4 <pollTapeData>:
}

void pollTapeData() {
	//PORTB |= 2;
	//tape_data_done = 578;
	if(active_port == TAPE_SENSOR_PORT) {
 2b4:	80 91 71 00 	lds	r24, 0x0071
 2b8:	90 91 72 00 	lds	r25, 0x0072
 2bc:	00 97       	sbiw	r24, 0x00	; 0
 2be:	01 f5       	brne	.+64     	; 0x300 <pollTapeData+0x4c>
		//int tape_bit = convertToBit(ADC);
		//tape_data |= (tape_bit << current_tape_sensor);
		current_tape_sensor++;
 2c0:	80 91 6c 00 	lds	r24, 0x006C
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
 2c6:	80 93 6c 00 	sts	0x006C, r24
		//current_tape_sensor = 1;
		tape_data_done = ADC;//
 2ca:	84 b1       	in	r24, 0x04	; 4
 2cc:	95 b1       	in	r25, 0x05	; 5
 2ce:	90 93 6b 00 	sts	0x006B, r25
 2d2:	80 93 6a 00 	sts	0x006A, r24
		if(current_tape_sensor == 9) //LED 10 is dead
 2d6:	80 91 6c 00 	lds	r24, 0x006C
 2da:	89 30       	cpi	r24, 0x09	; 9
 2dc:	19 f4       	brne	.+6      	; 0x2e4 <pollTapeData+0x30>
			current_tape_sensor = 10;
 2de:	8a e0       	ldi	r24, 0x0A	; 10
 2e0:	80 93 6c 00 	sts	0x006C, r24
		if(current_tape_sensor == 11) {
 2e4:	80 91 6c 00 	lds	r24, 0x006C
 2e8:	8b 30       	cpi	r24, 0x0B	; 11
 2ea:	11 f4       	brne	.+4      	; 0x2f0 <pollTapeData+0x3c>
			//tape_data_done = tape_data;
			//active_port = GYRO_PORT;
			current_tape_sensor = 0;
 2ec:	10 92 6c 00 	sts	0x006C, r1
		}
		//PORTB &= ~(0x0F);				// Clear the mux before setting the value
		//PORTB |= current_tape_sensor;	// Sets which tape sensor's data is converted
		PORTB = (PORTB & 0xF0) | (current_tape_sensor & 0x0F);
 2f0:	88 b3       	in	r24, 0x18	; 24
 2f2:	90 91 6c 00 	lds	r25, 0x006C
 2f6:	9f 70       	andi	r25, 0x0F	; 15
 2f8:	80 7f       	andi	r24, 0xF0	; 240
 2fa:	89 2b       	or	r24, r25
 2fc:	88 bb       	out	0x18, r24	; 24
 2fe:	08 95       	ret
	}
	else if(active_port == GYRO_PORT) {
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	51 f4       	brne	.+20     	; 0x318 <pollTapeData+0x64>
		gyro_data = ADC;
 304:	84 b1       	in	r24, 0x04	; 4
 306:	95 b1       	in	r25, 0x05	; 5
 308:	90 93 74 00 	sts	0x0074, r25
 30c:	80 93 73 00 	sts	0x0073, r24
		active_port = TAPE_SENSOR_PORT;
 310:	10 92 72 00 	sts	0x0072, r1
 314:	10 92 71 00 	sts	0x0071, r1
 318:	08 95       	ret

0000031a <__vector_14>:
	}
	//readADC(active_port);
}

ISR(ADC_vect) {
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	0f 92       	push	r0
 322:	11 24       	eor	r1, r1
 324:	2f 93       	push	r18
 326:	3f 93       	push	r19
 328:	4f 93       	push	r20
 32a:	5f 93       	push	r21
 32c:	6f 93       	push	r22
 32e:	7f 93       	push	r23
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25
 334:	af 93       	push	r26
 336:	bf 93       	push	r27
 338:	ef 93       	push	r30
 33a:	ff 93       	push	r31
	//PORTB |= 2;
	//tape_data_done = 578;
	if(active_port == TAPE_SENSOR_PORT) {
 33c:	80 91 71 00 	lds	r24, 0x0071
 340:	90 91 72 00 	lds	r25, 0x0072
 344:	00 97       	sbiw	r24, 0x00	; 0
 346:	c9 f4       	brne	.+50     	; 0x37a <__vector_14+0x60>
		//int tape_bit = convertToBit(ADC);
		//tape_data |= (tape_bit << current_tape_sensor);
		current_tape_sensor++;
 348:	80 91 6c 00 	lds	r24, 0x006C
 34c:	8f 5f       	subi	r24, 0xFF	; 255
 34e:	80 93 6c 00 	sts	0x006C, r24
		//current_tape_sensor = 1;
		tape_data_done = ADC;//
 352:	84 b1       	in	r24, 0x04	; 4
 354:	95 b1       	in	r25, 0x05	; 5
 356:	90 93 6b 00 	sts	0x006B, r25
 35a:	80 93 6a 00 	sts	0x006A, r24
		if(current_tape_sensor == 11) {
 35e:	80 91 6c 00 	lds	r24, 0x006C
 362:	8b 30       	cpi	r24, 0x0B	; 11
 364:	11 f4       	brne	.+4      	; 0x36a <__vector_14+0x50>
			//tape_data_done = tape_data;
			//active_port = GYRO_PORT;
			current_tape_sensor = 0;
 366:	10 92 6c 00 	sts	0x006C, r1
		}
		//PORTB &= ~(0x0F);				// Clear the mux before setting the value
		//PORTB |= current_tape_sensor;	// Sets which tape sensor's data is converted
		PORTB = (PORTB & 0xF0) | (current_tape_sensor & 0x0F);
 36a:	88 b3       	in	r24, 0x18	; 24
 36c:	90 91 6c 00 	lds	r25, 0x006C
 370:	9f 70       	andi	r25, 0x0F	; 15
 372:	80 7f       	andi	r24, 0xF0	; 240
 374:	89 2b       	or	r24, r25
 376:	88 bb       	out	0x18, r24	; 24
 378:	0c c0       	rjmp	.+24     	; 0x392 <__vector_14+0x78>
	}
	else if(active_port == GYRO_PORT) {
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	51 f4       	brne	.+20     	; 0x392 <__vector_14+0x78>
		gyro_data = ADC;
 37e:	84 b1       	in	r24, 0x04	; 4
 380:	95 b1       	in	r25, 0x05	; 5
 382:	90 93 74 00 	sts	0x0074, r25
 386:	80 93 73 00 	sts	0x0073, r24
		active_port = TAPE_SENSOR_PORT;
 38a:	10 92 72 00 	sts	0x0072, r1
 38e:	10 92 71 00 	sts	0x0071, r1
	}
	readADC(active_port);
 392:	80 91 71 00 	lds	r24, 0x0071
 396:	0e 94 4e 00 	call	0x9c	; 0x9c <readADC>
}
 39a:	ff 91       	pop	r31
 39c:	ef 91       	pop	r30
 39e:	bf 91       	pop	r27
 3a0:	af 91       	pop	r26
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	7f 91       	pop	r23
 3a8:	6f 91       	pop	r22
 3aa:	5f 91       	pop	r21
 3ac:	4f 91       	pop	r20
 3ae:	3f 91       	pop	r19
 3b0:	2f 91       	pop	r18
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <_exit>:
 3bc:	f8 94       	cli

000003be <__stop_program>:
 3be:	ff cf       	rjmp	.-2      	; 0x3be <__stop_program>
