
sensorenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000362  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000017  00800060  00800060  000003d6  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000178  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000da5  00000000  00000000  0000057e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000007da  00000000  00000000  00001323  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008cc  00000000  00000000  00001afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000330  00000000  00000000  000023cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000045a  00000000  00000000  000026fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000005b1  00000000  00000000  00002b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000118  00000000  00000000  00003107  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  8a:	0c 94 af 01 	jmp	0x35e	; 0x35e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initADC>:

#define WAIT_FOR_CONVERSION while(ADCSRA & (1<<ADSC)); // The function to wait for the conversion to finish


void initADC() {
	ADMUX |= (1 << REFS0) | (1<<ADLAR); // Apply 5V on AVCC, ADLAR to right align, only for testing
  92:	87 b1       	in	r24, 0x07	; 7
  94:	80 66       	ori	r24, 0x60	; 96
  96:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADIE); // ADC Enabled, Prescaler of 64, interrupts enabled
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	8e 68       	ori	r24, 0x8E	; 142
  9c:	86 b9       	out	0x06, r24	; 6
  9e:	08 95       	ret

000000a0 <readADC>:
}

uint8_t readADC(uint8_t port) {
	port &= 0x01; // Makes sure we only read port 1 or 0, the gyro is port 1, the tape sensor is port 0

	ADMUX = (ADMUX &= 0xF8) | port; // Clears port 0-7, to make sure there is nothing there that shouldn't be there
  a0:	97 b1       	in	r25, 0x07	; 7
  a2:	98 7f       	andi	r25, 0xF8	; 248
  a4:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (1 << REFS0) | (1<<ADLAR); // Apply 5V on AVCC, ADLAR to right align, only for testing
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADIE); // ADC Enabled, Prescaler of 64, interrupts enabled
}

uint8_t readADC(uint8_t port) {
	port &= 0x01; // Makes sure we only read port 1 or 0, the gyro is port 1, the tape sensor is port 0
  a6:	81 70       	andi	r24, 0x01	; 1

	ADMUX = (ADMUX &= 0xF8) | port; // Clears port 0-7, to make sure there is nothing there that shouldn't be there
  a8:	98 2b       	or	r25, r24
  aa:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC); // Starts the conversion by setting ADSC to 1
  ac:	36 9a       	sbi	0x06, 6	; 6
	//WAIT_FOR_CONVERSION; // Waits for the conversion to finish
	//uint8_t data = ADCH;

	//return data;
  ae:	08 95       	ret

000000b0 <getDistance>:
			STOP_TIMER;
			distanceSensors[DISTANCE_RIGHT] = distance;
			START_TIMER;
			done[DISTANCE_RIGHT] = 1;
		}
		if (!interrupted && !BACK_HIGH && !done[DISTANCE_BACK]) {
  b0:	80 e6       	ldi	r24, 0x60	; 96
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	08 95       	ret

000000b6 <initDistance>:
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	81 bb       	out	0x11, r24	; 17
  ba:	91 98       	cbi	0x12, 1	; 18
  bc:	84 e0       	ldi	r24, 0x04	; 4
  be:	80 93 60 00 	sts	0x0060, r24
  c2:	80 93 61 00 	sts	0x0061, r24
			STOP_TIMER;
  c6:	80 93 62 00 	sts	0x0062, r24
			distanceSensors[DISTANCE_BACK] = distance;
  ca:	80 93 63 00 	sts	0x0063, r24
  ce:	85 b5       	in	r24, 0x25	; 37
			START_TIMER;
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	85 bd       	out	0x25, r24	; 37
  d4:	89 b7       	in	r24, 0x39	; 57
			done[DISTANCE_BACK] = 1;
  d6:	80 68       	ori	r24, 0x80	; 128
		}
		if (!interrupted && !LEFT_HIGH && !done[DISTANCE_LEFT]) {
  d8:	89 bf       	out	0x39, r24	; 57
  da:	8a e3       	ldi	r24, 0x3A	; 58
  dc:	83 bd       	out	0x23, r24	; 35
  de:	d0 9a       	sbi	0x1a, 0	; 26
  e0:	08 95       	ret

000000e2 <__vector_3>:
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
			STOP_TIMER;
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	80 91 64 00 	lds	r24, 0x0064
			distanceSensors[DISTANCE_LEFT] = distance;
  f4:	90 91 65 00 	lds	r25, 0x0065
			done[DISTANCE_LEFT] = 1;
  f8:	01 96       	adiw	r24, 0x01	; 1
			START_TIMER;
  fa:	90 93 65 00 	sts	0x0065, r25
  fe:	80 93 64 00 	sts	0x0064, r24
	//Wait for input from sensors
	WAIT_FOR_INPUT;
	
	//Measure length of echo signal
	START_TIMER;
	while (FRONT_HIGH || RIGHT_HIGH || BACK_HIGH || LEFT_HIGH) {
 102:	d8 9a       	sbi	0x1b, 0	; 27
 104:	8a e1       	ldi	r24, 0x1A	; 26
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <__vector_3+0x24>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <__vector_3+0x2a>
 10c:	d8 98       	cbi	0x1b, 0	; 27
 10e:	9f 91       	pop	r25
			distanceSensors[DISTANCE_LEFT] = distance;
			done[DISTANCE_LEFT] = 1;
			START_TIMER;
		}
	}
	STOP_TIMER;
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
}
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <getGyroData>:
static int gyro_null_value = 0;
static int degrees_rotated = 0;

uint8_t getGyroData() {
	uint8_t gyro_data;
	gyro_data = readADC(1);				// Get gyro data from the ADC. Will return a value between 0 and 1023
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 50 00 	call	0xa0	; 0xa0 <readADC>
	// bla bla bla boring math here
	// bla bla bla boring math here
	// bla bla bla boring math here

	return gyro_data;
}
 122:	08 95       	ret

00000124 <returnDegreesRotated>:

// Return the amount of degrees the robot have currently rotated
uint8_t returnDegreesRotated() {
	return degrees_rotated;
}
 124:	80 91 66 00 	lds	r24, 0x0066
 128:	08 95       	ret

0000012a <resetDegreesRotated>:

void resetDegreesRotated(){
	degrees_rotated = 0;
 12a:	10 92 67 00 	sts	0x0067, r1
 12e:	10 92 66 00 	sts	0x0066, r1
 132:	08 95       	ret

00000134 <initGyro>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	89 e6       	ldi	r24, 0x69	; 105
 138:	98 e1       	ldi	r25, 0x18	; 24
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <initGyro+0x6>
 142:	00 c0       	rjmp	.+0      	; 0x144 <initGyro+0x10>
 144:	00 00       	nop

// Wait a second to make sure that the robot is not moving
// and then read the value of the gyro to get a standard value
void initGyro() {
	_delay_ms(1000);
	gyro_null_value = getGyroData();
 146:	0e 94 8e 00 	call	0x11c	; 0x11c <getGyroData>
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	90 93 69 00 	sts	0x0069, r25
 150:	80 93 68 00 	sts	0x0068, r24
 154:	08 95       	ret

00000156 <initSensors>:
static int tape_black = 0;
static int tape_floor = 0;

void initSensors() {
	// Initiate the mux for the tape sensors
	DDRB |= 0x0F;	
 156:	87 b3       	in	r24, 0x17	; 23
 158:	8f 60       	ori	r24, 0x0F	; 15
 15a:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(0x0F);
 15c:	88 b3       	in	r24, 0x18	; 24
 15e:	80 7f       	andi	r24, 0xF0	; 240
 160:	88 bb       	out	0x18, r24	; 24
	
	// Initiate the Analog to Digital Converter
	initADC();
 162:	0e 94 49 00 	call	0x92	; 0x92 <initADC>

	// Initiate the different sensors
	initDistance();
 166:	0e 94 5b 00 	call	0xb6	; 0xb6 <initDistance>
	initGyro();
 16a:	0e 94 9a 00 	call	0x134	; 0x134 <initGyro>
 16e:	08 95       	ret

00000170 <main>:
}

int main(void) {
	initSensors();
 170:	0e 94 ab 00 	call	0x156	; 0x156 <initSensors>
	SPI_Init();
 174:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Init>
	sei();
 178:	78 94       	sei
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	86 e7       	ldi	r24, 0x76	; 118
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x10>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x1a>
 18a:	00 00       	nop
 18c:	f6 cf       	rjmp	.-20     	; 0x17a <main+0xa>

0000018e <SPI_Init>:
#include "distanceSensor.h"
#include "tapeSensor.h"

// Initiates the SPI
void SPI_Init(void) {
	DDR_SPI |= (1<<SPI_MISO);		// Set MISO output
 18e:	be 9a       	sbi	0x17, 6	; 23
	SPCR = (1<<SPIE)|(1<<SPE)|(1<<SPR0);		// Enable SPI Enable interrupts
 190:	81 ec       	ldi	r24, 0xC1	; 193
 192:	8d b9       	out	0x0d, r24	; 13
 194:	08 95       	ret

00000196 <SPI_Transceive>:
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
}

char SPI_Transceive(char dataout) {
	SPDR = dataout;
 196:	8f b9       	out	0x0f, r24	; 15
	//cli();
	WAIT_FOR_TRANSFER;
 198:	77 9b       	sbis	0x0e, 7	; 14
 19a:	fe cf       	rjmp	.-4      	; 0x198 <SPI_Transceive+0x2>
	//sei();
	return SPDR;	
 19c:	8f b1       	in	r24, 0x0f	; 15
}
 19e:	08 95       	ret

000001a0 <SPI_Receive>:
	SPCR = (1<<SPIE)|(1<<SPE)|(1<<SPR0);		// Enable SPI Enable interrupts
}

// Receive over SPI
char SPI_Receive(void) {				
	return SPI_Transceive(0x00);
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 cb 00 	call	0x196	; 0x196 <SPI_Transceive>
}
 1a6:	08 95       	ret

000001a8 <sendDistanceSensors>:
	WAIT_FOR_TRANSFER;
	//sei();
	return SPDR;	
}

void sendDistanceSensors(void) {
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
	uint8_t *sensorData;
	sensorData = getDistance();
 1b0:	0e 94 58 00 	call	0xb0	; 0xb0 <getDistance>
 1b4:	8c 01       	movw	r16, r24
	for (int i = 0; i < SENSOR_COUNT; i++) {
 1b6:	c0 e0       	ldi	r28, 0x00	; 0
 1b8:	d0 e0       	ldi	r29, 0x00	; 0
	return SPI_Transceive(0x00);
}

// Send over SPI
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
 1ba:	f8 01       	movw	r30, r16
 1bc:	81 91       	ld	r24, Z+
 1be:	8f 01       	movw	r16, r30
 1c0:	0e 94 cb 00 	call	0x196	; 0x196 <SPI_Transceive>
}

void sendDistanceSensors(void) {
	uint8_t *sensorData;
	sensorData = getDistance();
	for (int i = 0; i < SENSOR_COUNT; i++) {
 1c4:	21 96       	adiw	r28, 0x01	; 1
 1c6:	c4 30       	cpi	r28, 0x04	; 4
 1c8:	d1 05       	cpc	r29, r1
 1ca:	b9 f7       	brne	.-18     	; 0x1ba <sendDistanceSensors+0x12>
		SPI_Send(sensorData[i]);
	}
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	08 95       	ret

000001d6 <sendTapeSensors>:

void sendTapeSensors() {
 1d6:	cf 93       	push	r28
	return SPI_Transceive(0x00);
}

// Send over SPI
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	0e 94 cb 00 	call	0x196	; 0x196 <SPI_Transceive>
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	0e 94 cb 00 	call	0x196	; 0x196 <SPI_Transceive>

void sendTapeSensors() {
	SPI_Send(0x03);	
	SPI_Send(0x02);
	//SPI_Send(getTapeData());	
	uint8_t highByte = (uint8_t)(tape_data_done >> 8);
 1e4:	c0 91 6c 00 	lds	r28, 0x006C
	return SPI_Transceive(0x00);
}

// Send over SPI
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
 1e8:	80 91 6d 00 	lds	r24, 0x006D
 1ec:	0e 94 cb 00 	call	0x196	; 0x196 <SPI_Transceive>
 1f0:	8c 2f       	mov	r24, r28
 1f2:	0e 94 cb 00 	call	0x196	; 0x196 <SPI_Transceive>
	uint8_t highByte = (uint8_t)(tape_data_done >> 8);
	uint8_t lowByte = (uint8_t)(tape_data_done);
	SPI_Send(highByte);
	SPI_Send(lowByte);
	//SPI_Send(0xFF);	
}
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <sendGyro>:
		}
	}
}

void sendGyro() {
	SPI_Send(returnDegreesRotated());
 1fa:	0e 94 92 00 	call	0x124	; 0x124 <returnDegreesRotated>
	return SPI_Transceive(0x00);
}

// Send over SPI
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
 1fe:	0e 94 cb 00 	call	0x196	; 0x196 <SPI_Transceive>
 202:	08 95       	ret

00000204 <__vector_10>:

void sendGyro() {
	SPI_Send(returnDegreesRotated());
}

ISR(SPISTC_vect) {	
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	2f 93       	push	r18
 210:	3f 93       	push	r19
 212:	4f 93       	push	r20
 214:	5f 93       	push	r21
 216:	6f 93       	push	r22
 218:	7f 93       	push	r23
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	af 93       	push	r26
 220:	bf 93       	push	r27
 222:	cf 93       	push	r28
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	char msg = SPDR;
 228:	cf b1       	in	r28, 0x0f	; 15
	char header = msg >> 6;
	char size = SPI_Receive();
 22a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <SPI_Receive>
	msg = msg & 0x3F;
	interrupted = 1;					// Maybe useful when updating distance
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	90 93 6b 00 	sts	0x006B, r25
 236:	80 93 6a 00 	sts	0x006A, r24
	SPI_Send(returnDegreesRotated());
}

ISR(SPISTC_vect) {	
	char msg = SPDR;
	char header = msg >> 6;
 23a:	8c 2f       	mov	r24, r28
 23c:	82 95       	swap	r24
 23e:	86 95       	lsr	r24
 240:	86 95       	lsr	r24
 242:	83 70       	andi	r24, 0x03	; 3
	char size = SPI_Receive();
	msg = msg & 0x3F;
	interrupted = 1;					// Maybe useful when updating distance
	if(header == 0x02) {
 244:	82 30       	cpi	r24, 0x02	; 2
 246:	01 f5       	brne	.+64     	; 0x288 <__vector_10+0x84>

ISR(SPISTC_vect) {	
	char msg = SPDR;
	char header = msg >> 6;
	char size = SPI_Receive();
	msg = msg & 0x3F;
 248:	cf 73       	andi	r28, 0x3F	; 63
	interrupted = 1;					// Maybe useful when updating distance
	if(header == 0x02) {
		switch (msg) {
 24a:	c3 30       	cpi	r28, 0x03	; 3
 24c:	91 f0       	breq	.+36     	; 0x272 <__vector_10+0x6e>
 24e:	28 f4       	brcc	.+10     	; 0x25a <__vector_10+0x56>
 250:	c1 30       	cpi	r28, 0x01	; 1
 252:	49 f0       	breq	.+18     	; 0x266 <__vector_10+0x62>
 254:	c2 30       	cpi	r28, 0x02	; 2
 256:	51 f0       	breq	.+20     	; 0x26c <__vector_10+0x68>
 258:	17 c0       	rjmp	.+46     	; 0x288 <__vector_10+0x84>
 25a:	c5 30       	cpi	r28, 0x05	; 5
 25c:	81 f0       	breq	.+32     	; 0x27e <__vector_10+0x7a>
 25e:	60 f0       	brcs	.+24     	; 0x278 <__vector_10+0x74>
 260:	c6 30       	cpi	r28, 0x06	; 6
 262:	81 f0       	breq	.+32     	; 0x284 <__vector_10+0x80>
 264:	11 c0       	rjmp	.+34     	; 0x288 <__vector_10+0x84>
			case 0x01:					// Reset gyro_angle
				resetDegreesRotated();
 266:	0e 94 95 00 	call	0x12a	; 0x12a <resetDegreesRotated>
				break;
 26a:	0e c0       	rjmp	.+28     	; 0x288 <__vector_10+0x84>
			case 0x02:					// How much gyro rotate and who was dog
				sendGyro();
 26c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <sendGyro>
				break;
 270:	0b c0       	rjmp	.+22     	; 0x288 <__vector_10+0x84>
			case 0x03:					// Set on tape value
				setOnTape();
 272:	0e 94 56 01 	call	0x2ac	; 0x2ac <setOnTape>
				break;
 276:	08 c0       	rjmp	.+16     	; 0x288 <__vector_10+0x84>
			case 0x04:					// Set off tape value
				setOffTape();
 278:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <setOffTape>
				break;
 27c:	05 c0       	rjmp	.+10     	; 0x288 <__vector_10+0x84>
			case 0x05:					// Send distance data
				sendDistanceSensors();
 27e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <sendDistanceSensors>
				break;
 282:	02 c0       	rjmp	.+4      	; 0x288 <__vector_10+0x84>
			case 0x06:					// Send tape data
				sendTapeSensors();
 284:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <sendTapeSensors>
				break;
			default:
				break;
		}
	}	
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	cf 91       	pop	r28
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <setOnTape>:
}

// Set on tape value for the tape sensor
void setOnTape() {
	uint8_t tape_data = getTapeData();				// Get data from the sensors
	on_tape = tape_data;
 2ac:	10 92 72 00 	sts	0x0072, r1
 2b0:	10 92 71 00 	sts	0x0071, r1
 2b4:	08 95       	ret

000002b6 <setOffTape>:
}

// Set off tape value for the tape sensor
void setOffTape() {
	uint8_t tape_data = getTapeData();						// Get data from the sensors
	off_tape = tape_data;
 2b6:	10 92 70 00 	sts	0x0070, r1
 2ba:	10 92 6f 00 	sts	0x006F, r1
 2be:	08 95       	ret

000002c0 <__vector_14>:
}

ISR(ADC_vect) {
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	2f 93       	push	r18
 2cc:	3f 93       	push	r19
 2ce:	4f 93       	push	r20
 2d0:	5f 93       	push	r21
 2d2:	6f 93       	push	r22
 2d4:	7f 93       	push	r23
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
	//PORTB |= 2;
	//tape_data_done = 578;
	if(active_port == TAPE_SENSOR_PORT) {		
 2e2:	80 91 73 00 	lds	r24, 0x0073
 2e6:	90 91 74 00 	lds	r25, 0x0074
 2ea:	00 97       	sbiw	r24, 0x00	; 0
 2ec:	b9 f4       	brne	.+46     	; 0x31c <__vector_14+0x5c>
		//int tape_bit = convertToBit(ADC);
		//tape_data |= (tape_bit << current_tape_sensor);
		//current_tape_sensor++;
		current_tape_sensor = 1;		
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 6e 00 	sts	0x006E, r24
		tape_data_done = ADC;//
 2f4:	84 b1       	in	r24, 0x04	; 4
 2f6:	95 b1       	in	r25, 0x05	; 5
 2f8:	90 93 6d 00 	sts	0x006D, r25
 2fc:	80 93 6c 00 	sts	0x006C, r24
		if(current_tape_sensor == 11) {	
 300:	80 91 6e 00 	lds	r24, 0x006E
 304:	8b 30       	cpi	r24, 0x0B	; 11
 306:	11 f4       	brne	.+4      	; 0x30c <__vector_14+0x4c>
			//tape_data_done = tape_data;				
			//active_port = GYRO_PORT;
			current_tape_sensor = 0;
 308:	10 92 6e 00 	sts	0x006E, r1
		}		
		//PORTB &= ~(0x0F);				// Clear the mux before setting the value
		//PORTB |= current_tape_sensor;	// Sets which tape sensor's data is converted
		PORTB = (PORTB & 0xF0) | (current_tape_sensor & 0x0F);
 30c:	88 b3       	in	r24, 0x18	; 24
 30e:	90 91 6e 00 	lds	r25, 0x006E
 312:	9f 70       	andi	r25, 0x0F	; 15
 314:	80 7f       	andi	r24, 0xF0	; 240
 316:	89 2b       	or	r24, r25
 318:	88 bb       	out	0x18, r24	; 24
 31a:	0c c0       	rjmp	.+24     	; 0x334 <__vector_14+0x74>
	}
	else if(active_port == GYRO_PORT) {
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	51 f4       	brne	.+20     	; 0x334 <__vector_14+0x74>
		gyro_data = ADC;
 320:	84 b1       	in	r24, 0x04	; 4
 322:	95 b1       	in	r25, 0x05	; 5
 324:	90 93 76 00 	sts	0x0076, r25
 328:	80 93 75 00 	sts	0x0075, r24
		active_port = TAPE_SENSOR_PORT;
 32c:	10 92 74 00 	sts	0x0074, r1
 330:	10 92 73 00 	sts	0x0073, r1
	}
	readADC(active_port);
 334:	80 91 73 00 	lds	r24, 0x0073
 338:	0e 94 50 00 	call	0xa0	; 0xa0 <readADC>
 33c:	ff 91       	pop	r31
 33e:	ef 91       	pop	r30
 340:	bf 91       	pop	r27
 342:	af 91       	pop	r26
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	7f 91       	pop	r23
 34a:	6f 91       	pop	r22
 34c:	5f 91       	pop	r21
 34e:	4f 91       	pop	r20
 350:	3f 91       	pop	r19
 352:	2f 91       	pop	r18
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <_exit>:
 35e:	f8 94       	cli

00000360 <__stop_program>:
 360:	ff cf       	rjmp	.-2      	; 0x360 <__stop_program>
