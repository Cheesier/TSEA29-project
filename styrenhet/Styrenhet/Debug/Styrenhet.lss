
Styrenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000004e0  00000574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800062  00800062  00000576  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  000005a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000edc  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e7  00000000  00000000  00001622  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ba  00000000  00000000  00001c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  000022c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000433  00000000  00000000  00002624  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c37  00000000  00000000  00002a57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  0000368e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_10>
  2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	1b 01       	movw	r2, r22
  56:	8a 01       	movw	r16, r20
  58:	8a 01       	movw	r16, r20
  5a:	1e 01       	movw	r2, r28
  5c:	23 01       	movw	r4, r6
  5e:	3c 01       	movw	r6, r24
  60:	46 01       	movw	r8, r12
  62:	4b 01       	movw	r8, r22
  64:	50 01       	movw	r10, r0
  66:	55 01       	movw	r10, r10
  68:	5a 01       	movw	r10, r20
  6a:	5d 01       	movw	r10, r26
  6c:	60 01       	movw	r12, r0
  6e:	65 01       	movw	r12, r10
  70:	6a 01       	movw	r12, r20

00000072 <__ctors_end>:
  72:	11 24       	eor	r1, r1
  74:	1f be       	out	0x3f, r1	; 63
  76:	cf e5       	ldi	r28, 0x5F	; 95
  78:	d4 e0       	ldi	r29, 0x04	; 4
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
  7e:	10 e0       	ldi	r17, 0x00	; 0
  80:	a0 e6       	ldi	r26, 0x60	; 96
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	e0 ee       	ldi	r30, 0xE0	; 224
  86:	f4 e0       	ldi	r31, 0x04	; 4
  88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
  8a:	05 90       	lpm	r0, Z+
  8c:	0d 92       	st	X+, r0
  8e:	a2 36       	cpi	r26, 0x62	; 98
  90:	b1 07       	cpc	r27, r17
  92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	a2 e6       	ldi	r26, 0x62	; 98
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
  9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
  9e:	ab 36       	cpi	r26, 0x6B	; 107
  a0:	b2 07       	cpc	r27, r18
  a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
  a4:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  a8:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <PDactivate>:
uint8_t sensorData[4];
int8_t PD_direction = 0;
uint8_t p, d;

void PDactivate() {
	active = 1;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	90 93 64 00 	sts	0x0064, r25
  b8:	80 93 63 00 	sts	0x0063, r24
  bc:	08 95       	ret

000000be <PDdeactivate>:
}
void PDdeactivate() {
	active = 0;
  be:	10 92 64 00 	sts	0x0064, r1
  c2:	10 92 63 00 	sts	0x0063, r1
  c6:	08 95       	ret

000000c8 <setPD>:
int8_t PDgetCorrection() {
	return PD_direction;
}

void setPD(uint8_t p_value, uint8_t d_value) {
	p = p_value;
  c8:	80 93 65 00 	sts	0x0065, r24
	d = d_value;
  cc:	60 93 6a 00 	sts	0x006A, r22
  d0:	08 95       	ret

000000d2 <PDforward>:
}

void PDforward() {
  d2:	cf 93       	push	r28
	while (PDisActive())
  d4:	80 91 63 00 	lds	r24, 0x0063
  d8:	90 91 64 00 	lds	r25, 0x0064
  dc:	89 2b       	or	r24, r25
  de:	99 f0       	breq	.+38     	; 0x106 <PDforward+0x34>
	{
		int8_t correction = PD_direction;
		uint8_t left_speed = 255;
		uint8_t right_speed = 255;
  e0:	cf ef       	ldi	r28, 0xFF	; 255
}

void PDforward() {
	while (PDisActive())
	{
		int8_t correction = PD_direction;
  e2:	60 91 62 00 	lds	r22, 0x0062
		uint8_t left_speed = 255;
		uint8_t right_speed = 255;
		if (correction >= 0) {
  e6:	66 23       	and	r22, r22
  e8:	1c f0       	brlt	.+6      	; 0xf0 <PDforward+0x1e>
			right_speed -= correction;
  ea:	60 95       	com	r22

void PDforward() {
	while (PDisActive())
	{
		int8_t correction = PD_direction;
		uint8_t left_speed = 255;
  ec:	8c 2f       	mov	r24, r28
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <PDforward+0x24>
		uint8_t right_speed = 255;
		if (correction >= 0) {
			right_speed -= correction;
		}
		else {
			left_speed += correction;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	86 0f       	add	r24, r22
void PDforward() {
	while (PDisActive())
	{
		int8_t correction = PD_direction;
		uint8_t left_speed = 255;
		uint8_t right_speed = 255;
  f4:	6c 2f       	mov	r22, r28
			right_speed -= correction;
		}
		else {
			left_speed += correction;
		}
		softTurn(left_speed, right_speed);
  f6:	0e 94 05 02 	call	0x40a	; 0x40a <softTurn>
	p = p_value;
	d = d_value;
}

void PDforward() {
	while (PDisActive())
  fa:	80 91 63 00 	lds	r24, 0x0063
  fe:	90 91 64 00 	lds	r25, 0x0064
 102:	89 2b       	or	r24, r25
 104:	71 f7       	brne	.-36     	; 0xe2 <PDforward+0x10>
		else {
			left_speed += correction;
		}
		softTurn(left_speed, right_speed);
	}
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <clawGrip>:
	RIGHT_WHEEL_VALUE = speed;
}

// Makes the claw grip
void clawGrip() {
	CLAW_VALUE = 5;	
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	8c bf       	out	0x3c, r24	; 60
 10e:	08 95       	ret

00000110 <clawRelease>:
}

// Makes the claw release its grip
void clawRelease() {
	CLAW_VALUE = 11;
 110:	8b e0       	ldi	r24, 0x0B	; 11
 112:	8c bf       	out	0x3c, r24	; 60
 114:	08 95       	ret

00000116 <clawEnable>:
}

// Enables the claw for gripping
void clawEnable() {
	CLAW_TIMER |= (1<<COM01);
 116:	83 b7       	in	r24, 0x33	; 51
 118:	80 62       	ori	r24, 0x20	; 32
 11a:	83 bf       	out	0x33, r24	; 51
 11c:	08 95       	ret

0000011e <clawDisable>:
}

// Disables the claw for when it's not in use since there is no need for it to constantly force itself open
// Saves battery life, motor wear and our ears
void clawDisable() {
	CLAW_TIMER &= ~(1<<COM01);
 11e:	83 b7       	in	r24, 0x33	; 51
 120:	8f 7d       	andi	r24, 0xDF	; 223
 122:	83 bf       	out	0x33, r24	; 51
 124:	08 95       	ret

00000126 <wheelsEnable>:
}

// Enables the wheels to turn
void wheelsEnable() {
	WHEEL_TIMER_A |= ((1<<COM1A1) | (1<<COM1B1));
 126:	8f b5       	in	r24, 0x2f	; 47
 128:	80 6a       	ori	r24, 0xA0	; 160
 12a:	8f bd       	out	0x2f, r24	; 47
 12c:	08 95       	ret

0000012e <wheelsDisable>:
}

// Disables the wheels, should only be used when stopping.
void wheelsDisable() {
	WHEEL_TIMER_A &= ~((1<<COM1A1) | (1<<COM1B1));
 12e:	8f b5       	in	r24, 0x2f	; 47
 130:	8f 75       	andi	r24, 0x5F	; 95
 132:	8f bd       	out	0x2f, r24	; 47
 134:	08 95       	ret

00000136 <init_pwm>:
	//	Controls TEH CLAW
	//	WGM decides the pwm mode			| WGM00 & WGM01 => fast pwm
	//	CS sets the prescaler				| CS02 & CS00 => CLK/1024
	//	COM sets the compare output mode	| COM01 => Clear OC0 on match, set on BOTTOM
	/************************************************************************/
	CLAW_TIMER |= (1 << WGM00) | (1 << WGM01) | (1 << CS02) | (1 << CS00);
 136:	83 b7       	in	r24, 0x33	; 51
 138:	8d 64       	ori	r24, 0x4D	; 77
 13a:	83 bf       	out	0x33, r24	; 51
	DDRB |= (1 << CLAW_PIN); // sets OC0 as output
 13c:	bb 9a       	sbi	0x17, 3	; 23
	//	Controls the wheel servos
	//	WGM decides the pwm	mode			| WGM10 & WGM12 => fast pwm, 8-bit
	//	CS sets the prescaler				| CS12 & CS10 => CLK/1024
	//	COM sets the compare output mode	| COM1A1 & COM1B1 => Clear OC1A:B on match, set on BOTTOM
	/************************************************************************/
	WHEEL_TIMER_A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
 13e:	8f b5       	in	r24, 0x2f	; 47
 140:	81 6a       	ori	r24, 0xA1	; 161
 142:	8f bd       	out	0x2f, r24	; 47
	WHEEL_TIMER_B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
 144:	8e b5       	in	r24, 0x2e	; 46
 146:	8d 60       	ori	r24, 0x0D	; 13
 148:	8e bd       	out	0x2e, r24	; 46
	DDRD |= (1 << RIGHT_WHEEL_PIN) | (1 << LEFT_WHEEL_PIN); // sets 0C1A:B as outputs (OC1A = Left, OC1B = Right)	
 14a:	81 b3       	in	r24, 0x11	; 17
 14c:	80 63       	ori	r24, 0x30	; 48
 14e:	81 bb       	out	0x11, r24	; 17
	
	wheelsDisable();
 150:	0e 94 97 00 	call	0x12e	; 0x12e <wheelsDisable>
	clawDisable();
 154:	0e 94 8f 00 	call	0x11e	; 0x11e <clawDisable>
 158:	08 95       	ret

0000015a <setSpeeds>:
void setSpeed(uint8_t speed) {
	setSpeeds(speed, speed);	
}

// Sets the duty cycle of the left motors to speed_left and the right motors to speed_right
void setSpeeds(uint8_t speed_left, uint8_t speed_right) {
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	c8 2f       	mov	r28, r24
 160:	d6 2f       	mov	r29, r22
	if(speed_left == 0 && speed_right == 0) {
 162:	81 11       	cpse	r24, r1
 164:	05 c0       	rjmp	.+10     	; 0x170 <setSpeeds+0x16>
 166:	61 11       	cpse	r22, r1
 168:	03 c0       	rjmp	.+6      	; 0x170 <setSpeeds+0x16>
		wheelsDisable();
 16a:	0e 94 97 00 	call	0x12e	; 0x12e <wheelsDisable>
		return;
 16e:	04 c0       	rjmp	.+8      	; 0x178 <setSpeeds+0x1e>
	}
	wheelsEnable();
 170:	0e 94 93 00 	call	0x126	; 0x126 <wheelsEnable>
	LEFT_WHEEL_VALUE = speed_left;	
 174:	ca bd       	out	0x2a, r28	; 42
	RIGHT_WHEEL_VALUE = speed_right;
 176:	d8 bd       	out	0x28, r29	; 40
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <setSpeed>:
	clawDisable();
}

// Sets the duty cycle of both motors to speed
void setSpeed(uint8_t speed) {
	setSpeeds(speed, speed);	
 17e:	68 2f       	mov	r22, r24
 180:	0e 94 ad 00 	call	0x15a	; 0x15a <setSpeeds>
 184:	08 95       	ret

00000186 <SPI_Init>:

#define WAIT_FOR_TRANSFER while(!(SPSR & (1<<SPIF)));

// Initiates the SPI
void SPI_Init(void) {
	DDR_SPI = (1<<SPI_MISO);		// Set MISO output
 186:	80 e4       	ldi	r24, 0x40	; 64
 188:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE);				// Enable SPI
 18a:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1<<SPIE);				// Enable interrupts
 18c:	6f 9a       	sbi	0x0d, 7	; 13
	SPCR |= (1<<SPR0);				// Prescaler 16
 18e:	68 9a       	sbi	0x0d, 0	; 13
 190:	08 95       	ret

00000192 <SPI_Transceive>:
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
}

char SPI_Transceive(char dataout) {
	SPDR = dataout;
 192:	8f b9       	out	0x0f, r24	; 15
	WAIT_FOR_TRANSFER;
 194:	77 9b       	sbis	0x0e, 7	; 14
 196:	fe cf       	rjmp	.-4      	; 0x194 <SPI_Transceive+0x2>
	return SPDR;
 198:	8f b1       	in	r24, 0x0f	; 15
}
 19a:	08 95       	ret

0000019c <SPI_Receive>:
	SPCR |= (1<<SPR0);				// Prescaler 16
}

// Receive from SPI
char SPI_Receive(void) {
	return SPI_Transceive(0x00);
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 c9 00 	call	0x192	; 0x192 <SPI_Transceive>
}
 1a2:	08 95       	ret

000001a4 <__vector_10>:
	SPDR = dataout;
	WAIT_FOR_TRANSFER;
	return SPDR;
}

ISR(SPISTC_vect) {
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	af 92       	push	r10
 1b0:	bf 92       	push	r11
 1b2:	cf 92       	push	r12
 1b4:	df 92       	push	r13
 1b6:	ef 92       	push	r14
 1b8:	ff 92       	push	r15
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	4f 93       	push	r20
 1c4:	5f 93       	push	r21
 1c6:	6f 93       	push	r22
 1c8:	7f 93       	push	r23
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
		}
		else {			// In case of unexpected header, send an error message
			headerError(header);
		}
	sei();
}
 1de:	0d b7       	in	r16, 0x3d	; 61
 1e0:	1e b7       	in	r17, 0x3e	; 62
	WAIT_FOR_TRANSFER;
	return SPDR;
}

ISR(SPISTC_vect) {
	cli();
 1e2:	f8 94       	cli
	char msg = SPDR;
 1e4:	ff b0       	in	r15, 0x0f	; 15
	char size = SPI_Receive();
 1e6:	0e 94 ce 00 	call	0x19c	; 0x19c <SPI_Receive>
	char header = msg >> 6;
	msg = msg & 0x3F;
	char speed;
	uint8_t d, p;
	char left_dir, right_dir, left_speed, right_speed;
	char unknownMessage[size];	//couldn't be down in the default..
 1ea:	2d b7       	in	r18, 0x3d	; 61
 1ec:	3e b7       	in	r19, 0x3e	; 62
 1ee:	28 1b       	sub	r18, r24
 1f0:	31 09       	sbc	r19, r1
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	3e bf       	out	0x3e, r19	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	2d bf       	out	0x3d, r18	; 61
 1fc:	2f 5f       	subi	r18, 0xFF	; 255
 1fe:	3f 4f       	sbci	r19, 0xFF	; 255

ISR(SPISTC_vect) {
	cli();
	char msg = SPDR;
	char size = SPI_Receive();
	char header = msg >> 6;
 200:	9f 2d       	mov	r25, r15
 202:	92 95       	swap	r25
 204:	96 95       	lsr	r25
 206:	96 95       	lsr	r25
 208:	93 70       	andi	r25, 0x03	; 3
	msg = msg & 0x3F;
	char speed;
	uint8_t d, p;
	char left_dir, right_dir, left_speed, right_speed;
	char unknownMessage[size];	//couldn't be down in the default..
		if(header == 0x01) {							// Make sure that the message is meant for us
 20a:	91 30       	cpi	r25, 0x01	; 1
 20c:	09 f0       	breq	.+2      	; 0x210 <__vector_10+0x6c>
 20e:	7f c0       	rjmp	.+254    	; 0x30e <__vector_10+0x16a>
ISR(SPISTC_vect) {
	cli();
	char msg = SPDR;
	char size = SPI_Receive();
	char header = msg >> 6;
	msg = msg & 0x3F;
 210:	4f 2d       	mov	r20, r15
 212:	4f 73       	andi	r20, 0x3F	; 63
	char speed;
	uint8_t d, p;
	char left_dir, right_dir, left_speed, right_speed;
	char unknownMessage[size];	//couldn't be down in the default..
		if(header == 0x01) {							// Make sure that the message is meant for us
			switch(msg) {								// Identify the message and act accordingly
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	fa 01       	movw	r30, r20
 218:	31 97       	sbiw	r30, 0x01	; 1
 21a:	ef 30       	cpi	r30, 0x0F	; 15
 21c:	f1 05       	cpc	r31, r1
 21e:	20 f4       	brcc	.+8      	; 0x228 <__vector_10+0x84>
 220:	e6 5d       	subi	r30, 0xD6	; 214
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__tablejump2__>
					right_dir = right_dir & 0x01;
					leftWheelDirection(left_dir);
					rightWheelDirection(right_dir);					
					break;
				default:	// Fetch the message anyway
					for(int i = 0; i < size; i++) {
 228:	a8 2e       	mov	r10, r24
 22a:	b1 2c       	mov	r11, r1
 22c:	1a 14       	cp	r1, r10
 22e:	1b 04       	cpc	r1, r11
 230:	0c f4       	brge	.+2      	; 0x234 <__vector_10+0x90>
 232:	5b c0       	rjmp	.+182    	; 0x2ea <__vector_10+0x146>
 234:	6f c0       	rjmp	.+222    	; 0x314 <__vector_10+0x170>
	char left_dir, right_dir, left_speed, right_speed;
	char unknownMessage[size];	//couldn't be down in the default..
		if(header == 0x01) {							// Make sure that the message is meant for us
			switch(msg) {								// Identify the message and act accordingly
				case 0x01:	// Forward with pd
					PDactivate();
 236:	0e 94 58 00 	call	0xb0	; 0xb0 <PDactivate>
					break;
 23a:	6c c0       	rjmp	.+216    	; 0x314 <__vector_10+0x170>
				case 0x02:
					break;
				case 0x03:
					break;
				case 0x04:	// Switch forward/backward (used when reversing through the labyrinth)
					msg = SPI_Receive();
 23c:	0e 94 ce 00 	call	0x19c	; 0x19c <SPI_Receive>
					setDirection(msg);
 240:	0e 94 b3 01 	call	0x366	; 0x366 <setDirection>
					break;
 244:	67 c0       	rjmp	.+206    	; 0x314 <__vector_10+0x170>
				case 0x05:	// Set the speed/direction for the different motors
					PDdeactivate(); //Begin with deactivating PD-regulation
 246:	0e 94 5f 00 	call	0xbe	; 0xbe <PDdeactivate>
					left_speed = SPI_Receive();
 24a:	0e 94 ce 00 	call	0x19c	; 0x19c <SPI_Receive>
 24e:	f8 2e       	mov	r15, r24
					left_dir = left_speed >> 7;
					left_speed = left_speed << 1;
					leftWheelDirection(left_dir);
 250:	88 1f       	adc	r24, r24
 252:	88 27       	eor	r24, r24
 254:	88 1f       	adc	r24, r24
 256:	0e 94 22 02 	call	0x444	; 0x444 <leftWheelDirection>

					right_speed = SPI_Receive();
 25a:	0e 94 ce 00 	call	0x19c	; 0x19c <SPI_Receive>
 25e:	e8 2e       	mov	r14, r24
					right_dir = right_speed >> 7;
					right_speed = right_speed << 1;
					rightWheelDirection(right_dir);
 260:	88 1f       	adc	r24, r24
 262:	88 27       	eor	r24, r24
 264:	88 1f       	adc	r24, r24
 266:	0e 94 33 02 	call	0x466	; 0x466 <rightWheelDirection>
					left_speed = left_speed << 1;
					leftWheelDirection(left_dir);

					right_speed = SPI_Receive();
					right_dir = right_speed >> 7;
					right_speed = right_speed << 1;
 26a:	6e 2d       	mov	r22, r14
 26c:	66 0f       	add	r22, r22
					rightWheelDirection(right_dir);
					wheelSpeeds(left_speed, right_speed);
 26e:	8f 2d       	mov	r24, r15
 270:	88 0f       	add	r24, r24
 272:	0e 94 44 02 	call	0x488	; 0x488 <wheelSpeeds>
					break;
 276:	4e c0       	rjmp	.+156    	; 0x314 <__vector_10+0x170>
				case 0x06:	// Set the p and d values
					p = SPI_Receive();
 278:	0e 94 ce 00 	call	0x19c	; 0x19c <SPI_Receive>
 27c:	f8 2e       	mov	r15, r24
					d = SPI_Receive();
 27e:	0e 94 ce 00 	call	0x19c	; 0x19c <SPI_Receive>
					setPD(p, d);
 282:	68 2f       	mov	r22, r24
 284:	8f 2d       	mov	r24, r15
 286:	0e 94 64 00 	call	0xc8	; 0xc8 <setPD>
					break;
 28a:	44 c0       	rjmp	.+136    	; 0x314 <__vector_10+0x170>
				case 0x07:	// Move forward with the specified speed
					PDdeactivate(); //Begin with deactivating PD-regulation
 28c:	0e 94 5f 00 	call	0xbe	; 0xbe <PDdeactivate>
					driveForward();
 290:	0e 94 bd 01 	call	0x37a	; 0x37a <driveForward>
					break;
 294:	3f c0       	rjmp	.+126    	; 0x314 <__vector_10+0x170>
				case 0x08:	// Move backward with the specified speed
					PDdeactivate(); //Begin with deactivating PD-regulation
 296:	0e 94 5f 00 	call	0xbe	; 0xbe <PDdeactivate>
					driveReverse();
 29a:	0e 94 cf 01 	call	0x39e	; 0x39e <driveReverse>
					break;
 29e:	3a c0       	rjmp	.+116    	; 0x314 <__vector_10+0x170>
				case 0x09:	// Rotate left with the specified speed
					PDdeactivate(); //Begin with deactivating PD-regulation
 2a0:	0e 94 5f 00 	call	0xbe	; 0xbe <PDdeactivate>
					rotateLeft();
 2a4:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <rotateLeft>
					break;
 2a8:	35 c0       	rjmp	.+106    	; 0x314 <__vector_10+0x170>
				case 0x0A:	// Rotate right with the specified speed					
					PDdeactivate(); //Begin with deactivating PD-regulation
 2aa:	0e 94 5f 00 	call	0xbe	; 0xbe <PDdeactivate>
					rotateRight();
 2ae:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <rotateRight>
					break;
 2b2:	30 c0       	rjmp	.+96     	; 0x314 <__vector_10+0x170>
				case 0x0B:	// Close the claw
					gripClaw();
 2b4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <gripClaw>
					break;
 2b8:	2d c0       	rjmp	.+90     	; 0x314 <__vector_10+0x170>
				case 0x0C:	// Open the claw
					releaseClaw();
 2ba:	0e 94 53 02 	call	0x4a6	; 0x4a6 <releaseClaw>
					break;
 2be:	2a c0       	rjmp	.+84     	; 0x314 <__vector_10+0x170>
				case 0x0D: // Stop the robot
					PDdeactivate(); //Begin with deactivating PD-regulation
 2c0:	0e 94 5f 00 	call	0xbe	; 0xbe <PDdeactivate>
					stopWheels();
 2c4:	0e 94 4e 02 	call	0x49c	; 0x49c <stopWheels>
					break;
 2c8:	25 c0       	rjmp	.+74     	; 0x314 <__vector_10+0x170>
				case 0x0E: // Set speed
					speed = SPI_Receive();
 2ca:	0e 94 ce 00 	call	0x19c	; 0x19c <SPI_Receive>
					maxSpeed = speed;
 2ce:	80 93 60 00 	sts	0x0060, r24
					break;
 2d2:	20 c0       	rjmp	.+64     	; 0x314 <__vector_10+0x170>
				case 0x0F:
					right_dir = SPI_Receive();
 2d4:	0e 94 ce 00 	call	0x19c	; 0x19c <SPI_Receive>
 2d8:	f8 2e       	mov	r15, r24
					left_dir = right_dir >> 1;
					right_dir = right_dir & 0x01;
					leftWheelDirection(left_dir);
 2da:	86 95       	lsr	r24
 2dc:	0e 94 22 02 	call	0x444	; 0x444 <leftWheelDirection>
					rightWheelDirection(right_dir);					
 2e0:	8f 2d       	mov	r24, r15
 2e2:	81 70       	andi	r24, 0x01	; 1
 2e4:	0e 94 33 02 	call	0x466	; 0x466 <rightWheelDirection>
					break;
 2e8:	15 c0       	rjmp	.+42     	; 0x314 <__vector_10+0x170>
 2ea:	69 01       	movw	r12, r18
				default:	// Fetch the message anyway
					for(int i = 0; i < size; i++) {
 2ec:	e1 2c       	mov	r14, r1
 2ee:	f1 2c       	mov	r15, r1
						unknownMessage[i] = SPI_Receive();
 2f0:	0e 94 ce 00 	call	0x19c	; 0x19c <SPI_Receive>
 2f4:	f6 01       	movw	r30, r12
 2f6:	81 93       	st	Z+, r24
 2f8:	6f 01       	movw	r12, r30
	return SPI_Transceive(0x00);
}

// Send over SPI
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
 2fa:	8f e3       	ldi	r24, 0x3F	; 63
 2fc:	0e 94 c9 00 	call	0x192	; 0x192 <SPI_Transceive>
					right_dir = right_dir & 0x01;
					leftWheelDirection(left_dir);
					rightWheelDirection(right_dir);					
					break;
				default:	// Fetch the message anyway
					for(int i = 0; i < size; i++) {
 300:	ff ef       	ldi	r31, 0xFF	; 255
 302:	ef 1a       	sub	r14, r31
 304:	ff 0a       	sbc	r15, r31
 306:	ea 14       	cp	r14, r10
 308:	fb 04       	cpc	r15, r11
 30a:	94 f3       	brlt	.-28     	; 0x2f0 <__vector_10+0x14c>
 30c:	03 c0       	rjmp	.+6      	; 0x314 <__vector_10+0x170>
	return SPI_Transceive(0x00);
}

// Send over SPI
void SPI_Send(char dataout) {
	SPI_Transceive(dataout);
 30e:	8f e3       	ldi	r24, 0x3F	; 63
 310:	0e 94 c9 00 	call	0x192	; 0x192 <SPI_Transceive>
			}
		}
		else {			// In case of unexpected header, send an error message
			headerError(header);
		}
	sei();
 314:	78 94       	sei
}
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	1e bf       	out	0x3e, r17	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0d bf       	out	0x3d, r16	; 61
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	bf 91       	pop	r27
 32a:	af 91       	pop	r26
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	7f 91       	pop	r23
 332:	6f 91       	pop	r22
 334:	5f 91       	pop	r21
 336:	4f 91       	pop	r20
 338:	3f 91       	pop	r19
 33a:	2f 91       	pop	r18
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	ff 90       	pop	r15
 342:	ef 90       	pop	r14
 344:	df 90       	pop	r13
 346:	cf 90       	pop	r12
 348:	bf 90       	pop	r11
 34a:	af 90       	pop	r10
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <main>:

char direction = FORWARD;
uint8_t maxSpeed = 255;

int main(void) {
	SPI_Init();								// Initiate SPI as a slaves
 356:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_Init>
	init_pwm();								// Initiates the pins used for PWM
 35a:	0e 94 9b 00 	call	0x136	; 0x136 <init_pwm>
	sei();
 35e:	78 94       	sei
	
	while(1) {
		PDforward();
 360:	0e 94 69 00 	call	0xd2	; 0xd2 <PDforward>
 364:	fd cf       	rjmp	.-6      	; 0x360 <main+0xa>

00000366 <setDirection>:
	}
}

// Set the character keeping track of the direction the robot is traveling in
void setDirection(uint8_t dir) {
	if(dir == 1) {
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	19 f4       	brne	.+6      	; 0x370 <setDirection+0xa>
		direction = FORWARD;
 36a:	80 93 61 00 	sts	0x0061, r24
 36e:	08 95       	ret
	}
	else if(dir == 0) {
 370:	81 11       	cpse	r24, r1
 372:	02 c0       	rjmp	.+4      	; 0x378 <setDirection+0x12>
		direction = REVERSE;
 374:	10 92 61 00 	sts	0x0061, r1
 378:	08 95       	ret

0000037a <driveForward>:
	maxSpeed = speed;
}

// The robot drives forward
void driveForward() {	
	if(direction == REVERSE) {
 37a:	80 91 61 00 	lds	r24, 0x0061
 37e:	81 11       	cpse	r24, r1
 380:	07 c0       	rjmp	.+14     	; 0x390 <driveForward+0x16>
		PORTA &= ~(1<<WHEEL_DIRECTION_L);		// Set wheel direction to reverse by
 382:	d8 98       	cbi	0x1b, 0	; 27
		PORTA &= ~(1<<WHEEL_DIRECTION_R);		// clearing the direction pins
 384:	d9 98       	cbi	0x1b, 1	; 27
		setSpeed(maxSpeed);
 386:	80 91 60 00 	lds	r24, 0x0060
 38a:	0e 94 bf 00 	call	0x17e	; 0x17e <setSpeed>
 38e:	08 95       	ret
	}
	else {
		PORTA |= (1<<WHEEL_DIRECTION_L);		// Set wheel direction to forward by
 390:	d8 9a       	sbi	0x1b, 0	; 27
		PORTA |= (1<<WHEEL_DIRECTION_R);		// setting the direction pins
 392:	d9 9a       	sbi	0x1b, 1	; 27
		setSpeed(maxSpeed);
 394:	80 91 60 00 	lds	r24, 0x0060
 398:	0e 94 bf 00 	call	0x17e	; 0x17e <setSpeed>
 39c:	08 95       	ret

0000039e <driveReverse>:
	}
}

// The robot drives in reverse
void driveReverse() {	
	if(direction == REVERSE) {
 39e:	80 91 61 00 	lds	r24, 0x0061
 3a2:	81 11       	cpse	r24, r1
 3a4:	07 c0       	rjmp	.+14     	; 0x3b4 <driveReverse+0x16>
		PORTA |= (1<<WHEEL_DIRECTION_L);		// Set wheel direction to forward by
 3a6:	d8 9a       	sbi	0x1b, 0	; 27
		PORTA |= (1<<WHEEL_DIRECTION_R);		// setting the direction pins
 3a8:	d9 9a       	sbi	0x1b, 1	; 27
		setSpeed(maxSpeed);
 3aa:	80 91 60 00 	lds	r24, 0x0060
 3ae:	0e 94 bf 00 	call	0x17e	; 0x17e <setSpeed>
 3b2:	08 95       	ret
	}
	else {
		PORTA &= ~(1<<WHEEL_DIRECTION_L);		// Set wheel direction to reverse by
 3b4:	d8 98       	cbi	0x1b, 0	; 27
		PORTA &= ~(1<<WHEEL_DIRECTION_R);		// clearing the direction pins
 3b6:	d9 98       	cbi	0x1b, 1	; 27
		setSpeed(maxSpeed);
 3b8:	80 91 60 00 	lds	r24, 0x0060
 3bc:	0e 94 bf 00 	call	0x17e	; 0x17e <setSpeed>
 3c0:	08 95       	ret

000003c2 <rotateLeft>:
	}
}

// The robot rotates to the left
void rotateLeft() {	
	if(direction == REVERSE){
 3c2:	80 91 61 00 	lds	r24, 0x0061
 3c6:	81 11       	cpse	r24, r1
 3c8:	07 c0       	rjmp	.+14     	; 0x3d8 <rotateLeft+0x16>
		PORTA |= (1<<WHEEL_DIRECTION_L);		// Make the robot turn right by setting
 3ca:	d8 9a       	sbi	0x1b, 0	; 27
		PORTA &= ~(1<<WHEEL_DIRECTION_R);		// the left wheels to forward and vice versa
 3cc:	d9 98       	cbi	0x1b, 1	; 27
		setSpeed(maxSpeed);
 3ce:	80 91 60 00 	lds	r24, 0x0060
 3d2:	0e 94 bf 00 	call	0x17e	; 0x17e <setSpeed>
 3d6:	08 95       	ret
	}
	else {
		PORTA &= ~(1<<WHEEL_DIRECTION_L);		// Make the robot turn left by setting
 3d8:	d8 98       	cbi	0x1b, 0	; 27
		PORTA |= (1<<WHEEL_DIRECTION_R);		// the right wheels to forward and vice versa
 3da:	d9 9a       	sbi	0x1b, 1	; 27
		setSpeed(maxSpeed);
 3dc:	80 91 60 00 	lds	r24, 0x0060
 3e0:	0e 94 bf 00 	call	0x17e	; 0x17e <setSpeed>
 3e4:	08 95       	ret

000003e6 <rotateRight>:
	}
}

// The robot rotates to the right
void rotateRight() {	
	if(direction == REVERSE){
 3e6:	80 91 61 00 	lds	r24, 0x0061
 3ea:	81 11       	cpse	r24, r1
 3ec:	07 c0       	rjmp	.+14     	; 0x3fc <rotateRight+0x16>
		PORTA &= ~(1<<WHEEL_DIRECTION_L);		// Make the robot turn left by setting
 3ee:	d8 98       	cbi	0x1b, 0	; 27
		PORTA |= (1<<WHEEL_DIRECTION_R);		// the right wheels to forward and vice versa
 3f0:	d9 9a       	sbi	0x1b, 1	; 27
		setSpeed(maxSpeed);
 3f2:	80 91 60 00 	lds	r24, 0x0060
 3f6:	0e 94 bf 00 	call	0x17e	; 0x17e <setSpeed>
 3fa:	08 95       	ret
	}
	else {
		PORTA |= (1<<WHEEL_DIRECTION_L);		// Make the robot turn right by setting
 3fc:	d8 9a       	sbi	0x1b, 0	; 27
		PORTA &= ~(1<<WHEEL_DIRECTION_R);		// the left wheels to forward and vice versa
 3fe:	d9 98       	cbi	0x1b, 1	; 27
		setSpeed(maxSpeed);
 400:	80 91 60 00 	lds	r24, 0x0060
 404:	0e 94 bf 00 	call	0x17e	; 0x17e <setSpeed>
 408:	08 95       	ret

0000040a <softTurn>:


// The robot makes a soft turn
// Turn direction is decided by the input parameters
void softTurn(uint8_t left_speed, uint8_t right_speed) {
	left_speed = left_speed * (maxSpeed/255);
 40a:	20 91 60 00 	lds	r18, 0x0060
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	2f 3f       	cpi	r18, 0xFF	; 255
 412:	08 f4       	brcc	.+2      	; 0x416 <softTurn+0xc>
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	89 9f       	mul	r24, r25
 418:	80 2d       	mov	r24, r0
 41a:	11 24       	eor	r1, r1
	right_speed = right_speed * (maxSpeed/255);
 41c:	69 9f       	mul	r22, r25
 41e:	90 2d       	mov	r25, r0
 420:	11 24       	eor	r1, r1
	if(direction == REVERSE) {
 422:	20 91 61 00 	lds	r18, 0x0061
 426:	21 11       	cpse	r18, r1
 428:	07 c0       	rjmp	.+14     	; 0x438 <softTurn+0x2e>
		PORTA &= ~(1<<WHEEL_DIRECTION_L);
 42a:	d8 98       	cbi	0x1b, 0	; 27
		PORTA &= ~(1<<WHEEL_DIRECTION_R);
 42c:	d9 98       	cbi	0x1b, 1	; 27
		setSpeeds(right_speed, left_speed);
 42e:	68 2f       	mov	r22, r24
 430:	89 2f       	mov	r24, r25
 432:	0e 94 ad 00 	call	0x15a	; 0x15a <setSpeeds>
		return;
 436:	08 95       	ret
		
	}	
	PORTA |= (1<<WHEEL_DIRECTION_L);
 438:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA |= (1<<WHEEL_DIRECTION_R);
 43a:	d9 9a       	sbi	0x1b, 1	; 27
	setSpeeds(left_speed, right_speed);				// The PWM implementation can handle separate speeds for both sides
 43c:	69 2f       	mov	r22, r25
 43e:	0e 94 ad 00 	call	0x15a	; 0x15a <setSpeeds>
 442:	08 95       	ret

00000444 <leftWheelDirection>:
	return;
}

// Set the direction of the left wheel pair according to input
void leftWheelDirection(uint8_t dir) {
	if(direction == REVERSE) {
 444:	90 91 61 00 	lds	r25, 0x0061
 448:	91 11       	cpse	r25, r1
 44a:	05 c0       	rjmp	.+10     	; 0x456 <leftWheelDirection+0x12>
		if(dir == 1) {
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	09 f4       	brne	.+2      	; 0x454 <leftWheelDirection+0x10>
 452:	90 e0       	ldi	r25, 0x00	; 0
			dir = 0;
 454:	89 2f       	mov	r24, r25
		else {
			dir = 1;
		}
	}
	
	if(dir == 1) {
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	11 f4       	brne	.+4      	; 0x45e <leftWheelDirection+0x1a>
		PORTA |= (1 << WHEEL_DIRECTION_L);		
 45a:	d8 9a       	sbi	0x1b, 0	; 27
 45c:	08 95       	ret
	}
	else if(dir == 0) {
 45e:	81 11       	cpse	r24, r1
 460:	01 c0       	rjmp	.+2      	; 0x464 <__stack+0x5>
		PORTA &= ~(1 << WHEEL_DIRECTION_L);
 462:	d8 98       	cbi	0x1b, 0	; 27
 464:	08 95       	ret

00000466 <rightWheelDirection>:
	}
}

// Set the direction of the right wheel pair according to input
void rightWheelDirection(uint8_t dir) {	
	if(direction == REVERSE) {
 466:	90 91 61 00 	lds	r25, 0x0061
 46a:	91 11       	cpse	r25, r1
 46c:	05 c0       	rjmp	.+10     	; 0x478 <rightWheelDirection+0x12>
		if(dir == 1) {
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	09 f4       	brne	.+2      	; 0x476 <rightWheelDirection+0x10>
 474:	90 e0       	ldi	r25, 0x00	; 0
			dir = 0;
 476:	89 2f       	mov	r24, r25
		else {
			dir = 1;
		}
	}
	
	if(dir == 1) {
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	11 f4       	brne	.+4      	; 0x480 <rightWheelDirection+0x1a>
		PORTA |= (1 << WHEEL_DIRECTION_R);
 47c:	d9 9a       	sbi	0x1b, 1	; 27
 47e:	08 95       	ret
	}
	else if(dir == 0) {
 480:	81 11       	cpse	r24, r1
 482:	01 c0       	rjmp	.+2      	; 0x486 <rightWheelDirection+0x20>
		PORTA &= ~(1 << WHEEL_DIRECTION_R);
 484:	d9 98       	cbi	0x1b, 1	; 27
 486:	08 95       	ret

00000488 <wheelSpeeds>:
}

// Set the speed of both wheel pairs
// QUESTION: Why is this needed?
void wheelSpeeds(uint8_t left_speed, uint8_t right_speed) {
	if(direction == REVERSE) {
 488:	90 91 61 00 	lds	r25, 0x0061
 48c:	91 11       	cpse	r25, r1
 48e:	03 c0       	rjmp	.+6      	; 0x496 <wheelSpeeds+0xe>
 490:	98 2f       	mov	r25, r24
		uint8_t temp = left_speed;
		left_speed = right_speed;
 492:	86 2f       	mov	r24, r22
		right_speed = temp;
 494:	69 2f       	mov	r22, r25
	}
	setSpeeds(left_speed, right_speed);
 496:	0e 94 ad 00 	call	0x15a	; 0x15a <setSpeeds>
 49a:	08 95       	ret

0000049c <stopWheels>:
}

void stopWheels() {	
	setSpeeds(0,0);	
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	0e 94 ad 00 	call	0x15a	; 0x15a <setSpeeds>
 4a4:	08 95       	ret

000004a6 <releaseClaw>:
}

// Calls PWM functions to release the claw
void releaseClaw() {
	clawEnable();
 4a6:	0e 94 8b 00 	call	0x116	; 0x116 <clawEnable>
	clawRelease();
 4aa:	0e 94 88 00 	call	0x110	; 0x110 <clawRelease>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ae:	2f ef       	ldi	r18, 0xFF	; 255
 4b0:	82 e5       	ldi	r24, 0x52	; 82
 4b2:	97 e0       	ldi	r25, 0x07	; 7
 4b4:	21 50       	subi	r18, 0x01	; 1
 4b6:	80 40       	sbci	r24, 0x00	; 0
 4b8:	90 40       	sbci	r25, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <releaseClaw+0xe>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <releaseClaw+0x18>
 4be:	00 00       	nop
	_delay_ms(300);
	clawDisable();
 4c0:	0e 94 8f 00 	call	0x11e	; 0x11e <clawDisable>
 4c4:	08 95       	ret

000004c6 <gripClaw>:
}

// Calls PWM functions to close the claw
void gripClaw() {
	clawEnable();
 4c6:	0e 94 8b 00 	call	0x116	; 0x116 <clawEnable>
	clawGrip();
 4ca:	0e 94 85 00 	call	0x10a	; 0x10a <clawGrip>
 4ce:	08 95       	ret

000004d0 <__tablejump2__>:
 4d0:	ee 0f       	add	r30, r30
 4d2:	ff 1f       	adc	r31, r31

000004d4 <__tablejump__>:
 4d4:	05 90       	lpm	r0, Z+
 4d6:	f4 91       	lpm	r31, Z
 4d8:	e0 2d       	mov	r30, r0
 4da:	09 94       	ijmp

000004dc <_exit>:
 4dc:	f8 94       	cli

000004de <__stop_program>:
 4de:	ff cf       	rjmp	.-2      	; 0x4de <__stop_program>
