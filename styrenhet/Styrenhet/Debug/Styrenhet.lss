
Styrenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000037a  000003ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000130  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a51  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000402  00000000  00000000  00000fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004eb  00000000  00000000  000013a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000250  00000000  00000000  00001890  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000035b  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000008e6  00000000  00000000  00001e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000118  00000000  00000000  00002721  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   8:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  10:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  14:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  18:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  1c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  20:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  24:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  28:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  2c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  30:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  34:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  38:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  3c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  40:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  44:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  48:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  4c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  50:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  54:	cf 00       	.word	0x00cf	; ????
  56:	1d 01       	movw	r2, r26
  58:	1d 01       	movw	r2, r26
  5a:	d2 00       	.word	0x00d2	; ????
  5c:	d7 00       	.word	0x00d7	; ????
  5e:	1d 01       	movw	r2, r26
  60:	ee 00       	.word	0x00ee	; ????
  62:	f4 00       	.word	0x00f4	; ????
  64:	fa 00       	.word	0x00fa	; ????
  66:	00 01       	movw	r0, r0
  68:	06 01       	movw	r0, r12
  6a:	09 01       	movw	r0, r18
  6c:	0c 01       	movw	r0, r24

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf e5       	ldi	r28, 0x5F	; 95
  74:	d4 e0       	ldi	r29, 0x04	; 4
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	10 e0       	ldi	r17, 0x00	; 0
  7c:	a0 e6       	ldi	r26, 0x60	; 96
  7e:	b0 e0       	ldi	r27, 0x00	; 0
  80:	ea e7       	ldi	r30, 0x7A	; 122
  82:	f3 e0       	ldi	r31, 0x03	; 3
  84:	02 c0       	rjmp	.+4      	; 0x8a <__do_copy_data+0x10>
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 36       	cpi	r26, 0x62	; 98
  8c:	b1 07       	cpc	r27, r17
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0xc>
  90:	0e 94 2d 01 	call	0x25a	; 0x25a <main>
  94:	0c 94 bb 01 	jmp	0x376	; 0x376 <_exit>

00000098 <__bad_interrupt>:
  98:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009c <clawGrip>:
	RIGHT_WHEEL_VALUE = speed;
}

// Makes the claw grip
void clawGrip() {
	CLAW_VALUE = 5;	
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	8c bf       	out	0x3c, r24	; 60
  a0:	08 95       	ret

000000a2 <clawRelease>:
}

// Makes the claw release its grip
void clawRelease() {
	CLAW_VALUE = 11;
  a2:	8b e0       	ldi	r24, 0x0B	; 11
  a4:	8c bf       	out	0x3c, r24	; 60
  a6:	08 95       	ret

000000a8 <clawEnable>:
}

// Enables the claw for gripping
void clawEnable() {
	CLAW_TIMER |= (1<<COM01);
  a8:	83 b7       	in	r24, 0x33	; 51
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	83 bf       	out	0x33, r24	; 51
  ae:	08 95       	ret

000000b0 <clawDisable>:
}

// Disables the claw for when it's not in use since there is no need for it to constantly force itself open
// Saves battery life, motor wear and our ears
void clawDisable() {
	CLAW_TIMER &= ~(1<<COM01);
  b0:	83 b7       	in	r24, 0x33	; 51
  b2:	8f 7d       	andi	r24, 0xDF	; 223
  b4:	83 bf       	out	0x33, r24	; 51
  b6:	08 95       	ret

000000b8 <wheelsEnable>:
}

// Enables the wheels to turn
void wheelsEnable() {
	WHEEL_TIMER_A |= ((1<<COM1A1) | (1<<COM1B1));
  b8:	8f b5       	in	r24, 0x2f	; 47
  ba:	80 6a       	ori	r24, 0xA0	; 160
  bc:	8f bd       	out	0x2f, r24	; 47
  be:	08 95       	ret

000000c0 <wheelsDisable>:
}

// Disables the wheels, should only be used when stopping.
void wheelsDisable() {
	WHEEL_TIMER_A &= ~((1<<COM1A1) | (1<<COM1B1));
  c0:	8f b5       	in	r24, 0x2f	; 47
  c2:	8f 75       	andi	r24, 0x5F	; 95
  c4:	8f bd       	out	0x2f, r24	; 47
  c6:	08 95       	ret

000000c8 <init_pwm>:
	//	Controls TEH CLAW
	//	WGM decides the pwm mode			| WGM00 & WGM01 => fast pwm
	//	CS sets the prescaler				| CS02 & CS00 => CLK/1024
	//	COM sets the compare output mode	| COM01 => Clear OC0 on match, set on BOTTOM
	/************************************************************************/
	CLAW_TIMER |= (1 << WGM00) | (1 << WGM01) | (1 << CS02) | (1 << CS00);
  c8:	83 b7       	in	r24, 0x33	; 51
  ca:	8d 64       	ori	r24, 0x4D	; 77
  cc:	83 bf       	out	0x33, r24	; 51
	DDRB |= (1 << CLAW_PIN); // sets OC0 as output
  ce:	bb 9a       	sbi	0x17, 3	; 23
	//	Controls the wheel servos
	//	WGM decides the pwm	mode			| WGM10 & WGM12 => fast pwm, 8-bit
	//	CS sets the prescaler				| CS12 & CS10 => CLK/1024
	//	COM sets the compare output mode	| COM1A1 & COM1B1 => Clear OC1A:B on match, set on BOTTOM
	/************************************************************************/
	WHEEL_TIMER_A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
  d0:	8f b5       	in	r24, 0x2f	; 47
  d2:	81 6a       	ori	r24, 0xA1	; 161
  d4:	8f bd       	out	0x2f, r24	; 47
	WHEEL_TIMER_B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
  d6:	8e b5       	in	r24, 0x2e	; 46
  d8:	8d 60       	ori	r24, 0x0D	; 13
  da:	8e bd       	out	0x2e, r24	; 46
	DDRD |= (1 << RIGHT_WHEEL_PIN) | (1 << LEFT_WHEEL_PIN); // sets 0C1A:B as outputs (OC1A = Left, OC1B = Right)	
  dc:	81 b3       	in	r24, 0x11	; 17
  de:	80 63       	ori	r24, 0x30	; 48
  e0:	81 bb       	out	0x11, r24	; 17
	
	wheelsDisable();
  e2:	0e 94 60 00 	call	0xc0	; 0xc0 <wheelsDisable>
	clawDisable();
  e6:	0e 94 58 00 	call	0xb0	; 0xb0 <clawDisable>
  ea:	08 95       	ret

000000ec <setSpeeds>:
void setSpeed(uint8_t speed) {
	setSpeeds(speed, speed);	
}

// Sets the duty cycle of the left motors to speed_left and the right motors to speed_right
void setSpeeds(uint8_t speed_left, uint8_t speed_right) {
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	c8 2f       	mov	r28, r24
  f2:	d6 2f       	mov	r29, r22
	if(speed_left == 0 && speed_right == 0) {
  f4:	81 11       	cpse	r24, r1
  f6:	05 c0       	rjmp	.+10     	; 0x102 <setSpeeds+0x16>
  f8:	61 11       	cpse	r22, r1
  fa:	03 c0       	rjmp	.+6      	; 0x102 <setSpeeds+0x16>
		wheelsDisable();
  fc:	0e 94 60 00 	call	0xc0	; 0xc0 <wheelsDisable>
		return;
 100:	04 c0       	rjmp	.+8      	; 0x10a <setSpeeds+0x1e>
	}
	wheelsEnable();
 102:	0e 94 5c 00 	call	0xb8	; 0xb8 <wheelsEnable>
	LEFT_WHEEL_VALUE = speed_left;	
 106:	ca bd       	out	0x2a, r28	; 42
	RIGHT_WHEEL_VALUE = speed_right;
 108:	d8 bd       	out	0x28, r29	; 40
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <setSpeed>:
	clawDisable();
}

// Sets the duty cycle of both motors to speed
void setSpeed(uint8_t speed) {
	setSpeeds(speed, speed);	
 110:	68 2f       	mov	r22, r24
 112:	0e 94 76 00 	call	0xec	; 0xec <setSpeeds>
 116:	08 95       	ret

00000118 <SPI_Init>:

#define WAIT_FOR_TRANSFER while(!(SPSR & (1<<SPIF)));

// Initiates the SPI
void SPI_Init(void) {
	DDR_SPI = (1<<SPI_MISO);		// Set MISO output
 118:	80 e4       	ldi	r24, 0x40	; 64
 11a:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE);				// Enable SPI
 11c:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1<<SPIE);				// Enable interrupts
 11e:	6f 9a       	sbi	0x0d, 7	; 13
	SPCR |= (1<<SPR0);				// Prescaler 16
 120:	68 9a       	sbi	0x0d, 0	; 13
 122:	08 95       	ret

00000124 <SPI_Receive>:
}

// Receive from SPI
char SPI_Receive(void) {
	WAIT_FOR_TRANSFER;				// Wait for reception to complete	
 124:	77 9b       	sbis	0x0e, 7	; 14
 126:	fe cf       	rjmp	.-4      	; 0x124 <SPI_Receive>
	return SPDR;					// Return Data Register
 128:	8f b1       	in	r24, 0x0f	; 15
}
 12a:	08 95       	ret

0000012c <receiveMessage>:
	WAIT_FOR_TRANSFER;				// Wait for transition to complete
	return;
}

// Receive a message from our main CPU
void receiveMessage() {
 12c:	af 92       	push	r10
 12e:	bf 92       	push	r11
 130:	cf 92       	push	r12
 132:	df 92       	push	r13
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
				}
				break;
		}
	}

 144:	0d b7       	in	r16, 0x3d	; 61
 146:	1e b7       	in	r17, 0x3e	; 62
	return;
}

// Receive a message from our main CPU
void receiveMessage() {
	char msg = SPI_Receive();
 148:	0e 94 92 00 	call	0x124	; 0x124 <SPI_Receive>
 14c:	f8 2e       	mov	r15, r24
	char size = SPI_Receive();
 14e:	0e 94 92 00 	call	0x124	; 0x124 <SPI_Receive>
	char header = msg >> 6;	
	msg = msg & 0x3F;
	char speed;	
	char left_dir, right_dir, left_speed, right_speed;
	char unknownMessage[size]; //couldn't be down in the default..
 152:	2d b7       	in	r18, 0x3d	; 61
 154:	3e b7       	in	r19, 0x3e	; 62
 156:	28 1b       	sub	r18, r24
 158:	31 09       	sbc	r19, r1
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	3e bf       	out	0x3e, r19	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	2d bf       	out	0x3d, r18	; 61
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	3f 4f       	sbci	r19, 0xFF	; 255

// Receive a message from our main CPU
void receiveMessage() {
	char msg = SPI_Receive();
	char size = SPI_Receive();
	char header = msg >> 6;	
 168:	9f 2d       	mov	r25, r15
 16a:	92 95       	swap	r25
 16c:	96 95       	lsr	r25
 16e:	96 95       	lsr	r25
 170:	93 70       	andi	r25, 0x03	; 3
	msg = msg & 0x3F;
	char speed;	
	char left_dir, right_dir, left_speed, right_speed;
	char unknownMessage[size]; //couldn't be down in the default..
	
	if(header == 0x01) {							// Make sure that the message is meant for us
 172:	91 30       	cpi	r25, 0x01	; 1
 174:	09 f0       	breq	.+2      	; 0x178 <receiveMessage+0x4c>
 176:	61 c0       	rjmp	.+194    	; 0x23a <receiveMessage+0x10e>
// Receive a message from our main CPU
void receiveMessage() {
	char msg = SPI_Receive();
	char size = SPI_Receive();
	char header = msg >> 6;	
	msg = msg & 0x3F;
 178:	4f 2d       	mov	r20, r15
 17a:	4f 73       	andi	r20, 0x3F	; 63
	char speed;	
	char left_dir, right_dir, left_speed, right_speed;
	char unknownMessage[size]; //couldn't be down in the default..
	
	if(header == 0x01) {							// Make sure that the message is meant for us
		switch(msg) {								// Identify the message and act accordingly 
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	fa 01       	movw	r30, r20
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	ed 30       	cpi	r30, 0x0D	; 13
 184:	f1 05       	cpc	r31, r1
 186:	20 f4       	brcc	.+8      	; 0x190 <receiveMessage+0x64>
 188:	e6 5d       	subi	r30, 0xD6	; 214
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__tablejump2__>
				break;
			case 0x0D: //STOP
				stopWheels();				
				break;
			default:	// Fetch the message anyway								
				for(int i = 0; i < size; i++) {
 190:	a8 2e       	mov	r10, r24
 192:	b1 2c       	mov	r11, r1
 194:	1a 14       	cp	r1, r10
 196:	1b 04       	cpc	r1, r11
 198:	0c f4       	brge	.+2      	; 0x19c <receiveMessage+0x70>
 19a:	41 c0       	rjmp	.+130    	; 0x21e <receiveMessage+0xf2>
 19c:	4e c0       	rjmp	.+156    	; 0x23a <receiveMessage+0x10e>
	char unknownMessage[size]; //couldn't be down in the default..
	
	if(header == 0x01) {							// Make sure that the message is meant for us
		switch(msg) {								// Identify the message and act accordingly 
			case 0x01:	// Forward with pd				
				speed = SPI_Receive();
 19e:	0e 94 92 00 	call	0x124	; 0x124 <SPI_Receive>
				speed = speed << 1;
				//pdForward(speed);	TODO			
				break;
 1a2:	4b c0       	rjmp	.+150    	; 0x23a <receiveMessage+0x10e>
				break;
			case 0x03:	// Turn off pd				
				//setPd(off); TODO
				break;
			case 0x04:	// Switch forward/backward (used when reversing through the labyrinth)
				msg = SPI_Receive();
 1a4:	0e 94 92 00 	call	0x124	; 0x124 <SPI_Receive>
				setDirection(msg);
 1a8:	0e 94 34 01 	call	0x268	; 0x268 <setDirection>
				break;
 1ac:	46 c0       	rjmp	.+140    	; 0x23a <receiveMessage+0x10e>
			case 0x05:	// Set the speed/direction for the different motors
				left_speed = SPI_Receive();
 1ae:	0e 94 92 00 	call	0x124	; 0x124 <SPI_Receive>
 1b2:	f8 2e       	mov	r15, r24
				left_dir = left_speed >> 7;
				left_speed = left_speed << 1;
				leftWheelDirection(left_dir);				
 1b4:	88 1f       	adc	r24, r24
 1b6:	88 27       	eor	r24, r24
 1b8:	88 1f       	adc	r24, r24
 1ba:	0e 94 76 01 	call	0x2ec	; 0x2ec <leftWheelDirection>
				
				right_speed = SPI_Receive();				
 1be:	0e 94 92 00 	call	0x124	; 0x124 <SPI_Receive>
 1c2:	e8 2e       	mov	r14, r24
				right_dir = right_speed >> 7;
				right_speed = right_speed << 1;
				rightWheelDirection(right_dir);
 1c4:	88 1f       	adc	r24, r24
 1c6:	88 27       	eor	r24, r24
 1c8:	88 1f       	adc	r24, r24
 1ca:	0e 94 87 01 	call	0x30e	; 0x30e <rightWheelDirection>
				left_speed = left_speed << 1;
				leftWheelDirection(left_dir);				
				
				right_speed = SPI_Receive();				
				right_dir = right_speed >> 7;
				right_speed = right_speed << 1;
 1ce:	6e 2d       	mov	r22, r14
 1d0:	66 0f       	add	r22, r22
				rightWheelDirection(right_dir);
				wheelSpeeds(left_speed, right_speed);
 1d2:	8f 2d       	mov	r24, r15
 1d4:	88 0f       	add	r24, r24
 1d6:	0e 94 98 01 	call	0x330	; 0x330 <wheelSpeeds>
				break;
 1da:	2f c0       	rjmp	.+94     	; 0x23a <receiveMessage+0x10e>
			case 0x06:	// Set the p and d values
				// setPD(p, d); to be implemented
				break;
			case 0x07:	// Move forward with the specified speed
				speed = SPI_Receive() << 1;			
 1dc:	0e 94 92 00 	call	0x124	; 0x124 <SPI_Receive>
				driveForward(speed);
 1e0:	88 0f       	add	r24, r24
 1e2:	0e 94 3e 01 	call	0x27c	; 0x27c <driveForward>
				break;
 1e6:	29 c0       	rjmp	.+82     	; 0x23a <receiveMessage+0x10e>
			case 0x08:	// Move backward with the specified speed
				speed = SPI_Receive() << 1;
 1e8:	0e 94 92 00 	call	0x124	; 0x124 <SPI_Receive>
				driveReverse(speed);
 1ec:	88 0f       	add	r24, r24
 1ee:	0e 94 4c 01 	call	0x298	; 0x298 <driveReverse>
				break;
 1f2:	23 c0       	rjmp	.+70     	; 0x23a <receiveMessage+0x10e>
			case 0x09:	// Rotate left with the specified speed
				speed = SPI_Receive() << 1;
 1f4:	0e 94 92 00 	call	0x124	; 0x124 <SPI_Receive>
				rotateLeft(speed);
 1f8:	88 0f       	add	r24, r24
 1fa:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <rotateLeft>
				break;
 1fe:	1d c0       	rjmp	.+58     	; 0x23a <receiveMessage+0x10e>
			case 0x0A:	// Rotate right with the specified speed
				speed = SPI_Receive() << 1;
 200:	0e 94 92 00 	call	0x124	; 0x124 <SPI_Receive>
				rotateRight(speed);
 204:	88 0f       	add	r24, r24
 206:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rotateRight>
				break;
 20a:	17 c0       	rjmp	.+46     	; 0x23a <receiveMessage+0x10e>
			case 0x0B:	// Close the claw
				gripClaw();
 20c:	0e 94 b0 01 	call	0x360	; 0x360 <gripClaw>
				break;
 210:	14 c0       	rjmp	.+40     	; 0x23a <receiveMessage+0x10e>
			case 0x0C:	// Open the claw
				releaseClaw();
 212:	0e 94 a0 01 	call	0x340	; 0x340 <releaseClaw>
				break;
 216:	11 c0       	rjmp	.+34     	; 0x23a <receiveMessage+0x10e>
			case 0x0D: //STOP
				stopWheels();				
 218:	0e 94 9b 01 	call	0x336	; 0x336 <stopWheels>
				break;
 21c:	0e c0       	rjmp	.+28     	; 0x23a <receiveMessage+0x10e>
 21e:	69 01       	movw	r12, r18
			default:	// Fetch the message anyway								
				for(int i = 0; i < size; i++) {
 220:	e1 2c       	mov	r14, r1
 222:	f1 2c       	mov	r15, r1
					unknownMessage[i] = SPI_Receive();
 224:	0e 94 92 00 	call	0x124	; 0x124 <SPI_Receive>
 228:	f6 01       	movw	r30, r12
 22a:	81 93       	st	Z+, r24
 22c:	6f 01       	movw	r12, r30
				break;
			case 0x0D: //STOP
				stopWheels();				
				break;
			default:	// Fetch the message anyway								
				for(int i = 0; i < size; i++) {
 22e:	ff ef       	ldi	r31, 0xFF	; 255
 230:	ef 1a       	sub	r14, r31
 232:	ff 0a       	sbc	r15, r31
 234:	ea 14       	cp	r14, r10
 236:	fb 04       	cpc	r15, r11
 238:	ac f3       	brlt	.-22     	; 0x224 <receiveMessage+0xf8>
				}
				break;
		}
	}

 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	1e bf       	out	0x3e, r17	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	0d bf       	out	0x3d, r16	; 61
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	ff 90       	pop	r15
 24e:	ef 90       	pop	r14
 250:	df 90       	pop	r13
 252:	cf 90       	pop	r12
 254:	bf 90       	pop	r11
 256:	af 90       	pop	r10
 258:	08 95       	ret

0000025a <main>:
#define REVERSE 0

char direction = FORWARD;

int main(void) {
	SPI_Init();								// Initiate SPI as a slaves
 25a:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_Init>
	init_pwm();								// Initiates the pins used for PWM
 25e:	0e 94 64 00 	call	0xc8	; 0xc8 <init_pwm>
	while(1) {
		//gripClaw();
		//_delay_ms(2500);
		//releaseClaw();
		//_delay_ms(500);
		receiveMessage();
 262:	0e 94 96 00 	call	0x12c	; 0x12c <receiveMessage>
 266:	fd cf       	rjmp	.-6      	; 0x262 <main+0x8>

00000268 <setDirection>:
	}
}

// Set the character keeping track of the direction the robot is traveling in
void setDirection(uint8_t dir) {
	if(dir == 1) {
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	19 f4       	brne	.+6      	; 0x272 <setDirection+0xa>
		direction = FORWARD;
 26c:	80 93 60 00 	sts	0x0060, r24
 270:	08 95       	ret
	}
	else if(dir == 0) {
 272:	81 11       	cpse	r24, r1
 274:	02 c0       	rjmp	.+4      	; 0x27a <setDirection+0x12>
		direction = REVERSE;
 276:	10 92 60 00 	sts	0x0060, r1
 27a:	08 95       	ret

0000027c <driveForward>:
	}
}

// The robot drives forward
void driveForward(uint8_t speed) {	
	if(direction == REVERSE) {
 27c:	90 91 60 00 	lds	r25, 0x0060
 280:	91 11       	cpse	r25, r1
 282:	05 c0       	rjmp	.+10     	; 0x28e <driveForward+0x12>
		PORTA &= ~(1<<WHEEL_DIRECTION_L);		// Set wheel direction to reverse by
 284:	d8 98       	cbi	0x1b, 0	; 27
		PORTA &= ~(1<<WHEEL_DIRECTION_R);		// clearing the direction pins
 286:	d9 98       	cbi	0x1b, 1	; 27
		setSpeed(speed);
 288:	0e 94 88 00 	call	0x110	; 0x110 <setSpeed>
 28c:	08 95       	ret
	}
	else {
		PORTA |= (1<<WHEEL_DIRECTION_L);		// Set wheel direction to forward by
 28e:	d8 9a       	sbi	0x1b, 0	; 27
		PORTA |= (1<<WHEEL_DIRECTION_R);		// setting the direction pins
 290:	d9 9a       	sbi	0x1b, 1	; 27
		setSpeed(speed);
 292:	0e 94 88 00 	call	0x110	; 0x110 <setSpeed>
 296:	08 95       	ret

00000298 <driveReverse>:
	return;
}

// The robot drives in reverse
void driveReverse(uint8_t speed) {	
	if(direction == REVERSE) {
 298:	90 91 60 00 	lds	r25, 0x0060
 29c:	91 11       	cpse	r25, r1
 29e:	05 c0       	rjmp	.+10     	; 0x2aa <driveReverse+0x12>
		PORTA |= (1<<WHEEL_DIRECTION_L);		// Set wheel direction to forward by
 2a0:	d8 9a       	sbi	0x1b, 0	; 27
		PORTA |= (1<<WHEEL_DIRECTION_R);		// setting the direction pins
 2a2:	d9 9a       	sbi	0x1b, 1	; 27
		setSpeed(speed);
 2a4:	0e 94 88 00 	call	0x110	; 0x110 <setSpeed>
 2a8:	08 95       	ret
	}
	else {
		PORTA &= ~(1<<WHEEL_DIRECTION_L);		// Set wheel direction to reverse by
 2aa:	d8 98       	cbi	0x1b, 0	; 27
		PORTA &= ~(1<<WHEEL_DIRECTION_R);		// clearing the direction pins
 2ac:	d9 98       	cbi	0x1b, 1	; 27
		setSpeed(speed);
 2ae:	0e 94 88 00 	call	0x110	; 0x110 <setSpeed>
 2b2:	08 95       	ret

000002b4 <rotateLeft>:
	return;
}

// The robot rotates to the left
void rotateLeft(uint8_t speed) {	
	if(direction == REVERSE){
 2b4:	90 91 60 00 	lds	r25, 0x0060
 2b8:	91 11       	cpse	r25, r1
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <rotateLeft+0x12>
		PORTA |= (1<<WHEEL_DIRECTION_L);		// Make the robot turn right by setting
 2bc:	d8 9a       	sbi	0x1b, 0	; 27
		PORTA &= ~(1<<WHEEL_DIRECTION_R);		// the left wheels to forward and vice versa
 2be:	d9 98       	cbi	0x1b, 1	; 27
		setSpeed(speed);
 2c0:	0e 94 88 00 	call	0x110	; 0x110 <setSpeed>
 2c4:	08 95       	ret
	}
	else {
		PORTA &= ~(1<<WHEEL_DIRECTION_L);		// Make the robot turn left by setting
 2c6:	d8 98       	cbi	0x1b, 0	; 27
		PORTA |= (1<<WHEEL_DIRECTION_R);		// the right wheels to forward and vice versa
 2c8:	d9 9a       	sbi	0x1b, 1	; 27
		setSpeed(speed);
 2ca:	0e 94 88 00 	call	0x110	; 0x110 <setSpeed>
 2ce:	08 95       	ret

000002d0 <rotateRight>:
	return;
}

// The robot rotates to the right
void rotateRight(uint8_t speed) {	
	if(direction == REVERSE){
 2d0:	90 91 60 00 	lds	r25, 0x0060
 2d4:	91 11       	cpse	r25, r1
 2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <rotateRight+0x12>
		PORTA &= ~(1<<WHEEL_DIRECTION_L);		// Make the robot turn left by setting
 2d8:	d8 98       	cbi	0x1b, 0	; 27
		PORTA |= (1<<WHEEL_DIRECTION_R);		// the right wheels to forward and vice versa
 2da:	d9 9a       	sbi	0x1b, 1	; 27
		setSpeed(speed);
 2dc:	0e 94 88 00 	call	0x110	; 0x110 <setSpeed>
 2e0:	08 95       	ret
	}
	else {
		PORTA |= (1<<WHEEL_DIRECTION_L);		// Make the robot turn right by setting
 2e2:	d8 9a       	sbi	0x1b, 0	; 27
		PORTA &= ~(1<<WHEEL_DIRECTION_R);		// the left wheels to forward and vice versa
 2e4:	d9 98       	cbi	0x1b, 1	; 27
		setSpeed(speed);
 2e6:	0e 94 88 00 	call	0x110	; 0x110 <setSpeed>
 2ea:	08 95       	ret

000002ec <leftWheelDirection>:
	return;
}

// Set the direction of the left wheel pair according to input
void leftWheelDirection(uint8_t dir) {
	if(direction == REVERSE) {
 2ec:	90 91 60 00 	lds	r25, 0x0060
 2f0:	91 11       	cpse	r25, r1
 2f2:	05 c0       	rjmp	.+10     	; 0x2fe <leftWheelDirection+0x12>
		if(dir == 1) {
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	09 f4       	brne	.+2      	; 0x2fc <leftWheelDirection+0x10>
 2fa:	90 e0       	ldi	r25, 0x00	; 0
			dir = 0;
 2fc:	89 2f       	mov	r24, r25
		else {
			dir = 1;
		}
	}
	
	if(dir == 1) {
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	11 f4       	brne	.+4      	; 0x306 <leftWheelDirection+0x1a>
		PORTA |= (1 << WHEEL_DIRECTION_L);		
 302:	d8 9a       	sbi	0x1b, 0	; 27
 304:	08 95       	ret
	}
	else if(dir == 0) {
 306:	81 11       	cpse	r24, r1
 308:	01 c0       	rjmp	.+2      	; 0x30c <leftWheelDirection+0x20>
		PORTA &= ~(1 << WHEEL_DIRECTION_L);
 30a:	d8 98       	cbi	0x1b, 0	; 27
 30c:	08 95       	ret

0000030e <rightWheelDirection>:
	}
}

// Set the direction of the right wheel pair according to input
void rightWheelDirection(uint8_t dir) {	
	if(direction == REVERSE) {
 30e:	90 91 60 00 	lds	r25, 0x0060
 312:	91 11       	cpse	r25, r1
 314:	05 c0       	rjmp	.+10     	; 0x320 <rightWheelDirection+0x12>
		if(dir == 1) {
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	09 f4       	brne	.+2      	; 0x31e <rightWheelDirection+0x10>
 31c:	90 e0       	ldi	r25, 0x00	; 0
			dir = 0;
 31e:	89 2f       	mov	r24, r25
		else {
			dir = 1;
		}
	}
	
	if(dir == 1) {
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	11 f4       	brne	.+4      	; 0x328 <rightWheelDirection+0x1a>
		PORTA |= (1 << WHEEL_DIRECTION_R);
 324:	d9 9a       	sbi	0x1b, 1	; 27
 326:	08 95       	ret
	}
	else if(dir == 0) {
 328:	81 11       	cpse	r24, r1
 32a:	01 c0       	rjmp	.+2      	; 0x32e <rightWheelDirection+0x20>
		PORTA &= ~(1 << WHEEL_DIRECTION_R);
 32c:	d9 98       	cbi	0x1b, 1	; 27
 32e:	08 95       	ret

00000330 <wheelSpeeds>:
}

// Set the speed of both wheel pairs
// QUESTION: Why is this needed?
void wheelSpeeds(uint8_t left_speed, uint8_t right_speed) {	
	setSpeeds(left_speed, right_speed);
 330:	0e 94 76 00 	call	0xec	; 0xec <setSpeeds>
 334:	08 95       	ret

00000336 <stopWheels>:
}

void stopWheels() {	
	setSpeeds(0,0);	
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 76 00 	call	0xec	; 0xec <setSpeeds>
 33e:	08 95       	ret

00000340 <releaseClaw>:
}

// Calls PWM functions to release the claw
void releaseClaw() {
	clawEnable();
 340:	0e 94 54 00 	call	0xa8	; 0xa8 <clawEnable>
	clawRelease();
 344:	0e 94 51 00 	call	0xa2	; 0xa2 <clawRelease>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 348:	2f ef       	ldi	r18, 0xFF	; 255
 34a:	82 e5       	ldi	r24, 0x52	; 82
 34c:	97 e0       	ldi	r25, 0x07	; 7
 34e:	21 50       	subi	r18, 0x01	; 1
 350:	80 40       	sbci	r24, 0x00	; 0
 352:	90 40       	sbci	r25, 0x00	; 0
 354:	e1 f7       	brne	.-8      	; 0x34e <releaseClaw+0xe>
 356:	00 c0       	rjmp	.+0      	; 0x358 <releaseClaw+0x18>
 358:	00 00       	nop
	_delay_ms(300);
	clawDisable();
 35a:	0e 94 58 00 	call	0xb0	; 0xb0 <clawDisable>
 35e:	08 95       	ret

00000360 <gripClaw>:
}

// Calls PWM functions to close the claw
void gripClaw() {
	clawEnable();
 360:	0e 94 54 00 	call	0xa8	; 0xa8 <clawEnable>
	clawGrip();
 364:	0e 94 4e 00 	call	0x9c	; 0x9c <clawGrip>
 368:	08 95       	ret

0000036a <__tablejump2__>:
 36a:	ee 0f       	add	r30, r30
 36c:	ff 1f       	adc	r31, r31

0000036e <__tablejump__>:
 36e:	05 90       	lpm	r0, Z+
 370:	f4 91       	lpm	r31, Z
 372:	e0 2d       	mov	r30, r0
 374:	09 94       	ijmp

00000376 <_exit>:
 376:	f8 94       	cli

00000378 <__stop_program>:
 378:	ff cf       	rjmp	.-2      	; 0x378 <__stop_program>
