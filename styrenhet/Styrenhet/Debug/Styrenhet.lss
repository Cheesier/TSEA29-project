
Styrenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000c8  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000005a1  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000221  00000000  00000000  000007ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000034d  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000158  00000000  00000000  00000d70  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000028b  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000108  00000000  00000000  00001153  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  0000125b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_pwm>:
//	Controls TEH CLAW
//	WGM decides the pwm mode			| WGM00 & WGM01 => fast pwm
//	CS sets the prescaler				| CS02 & CS00 => CLK/1024
//	COM sets the compare output mode	| COM01 => Clear OC0 on match, set on BOTTOM
/************************************************************************/
CLAW_TIMER |= (1 << WGM00) | (1 << WGM01) | (1 << CS02) | (1 << CS00);
  6c:	83 b7       	in	r24, 0x33	; 51
  6e:	8d 64       	ori	r24, 0x4D	; 77
  70:	83 bf       	out	0x33, r24	; 51
DDRB |= (1 << CLAW_PIN); //sets OC0 as output
  72:	bb 9a       	sbi	0x17, 3	; 23
//	Controls the wheel servos
//	WGM decides the pwm	mode			| WGM10 & WGM12 => fast pwm, 8-bit
//	CS sets the prescaler				| CS12 & CS10 => CLK/1024
//	COM sets the compare output mode	| COM1A1 & COM1B1 => Clear OC1A:B on match, set on BOTTOM
/************************************************************************/
WHEEL_TIMER_A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
  74:	8f b5       	in	r24, 0x2f	; 47
  76:	81 6a       	ori	r24, 0xA1	; 161
  78:	8f bd       	out	0x2f, r24	; 47
WHEEL_TIMER_B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
  7a:	8e b5       	in	r24, 0x2e	; 46
  7c:	8d 60       	ori	r24, 0x0D	; 13
  7e:	8e bd       	out	0x2e, r24	; 46
DDRD |= (1 << RIGHT_WHEEL_PIN) | (1 << LEFT_WHEEL_PIN); //sets 0C1A:B as outputs (OC1A = Left, OC1B = Right)	
  80:	81 b3       	in	r24, 0x11	; 17
  82:	80 63       	ori	r24, 0x30	; 48
  84:	81 bb       	out	0x11, r24	; 17
  86:	08 95       	ret

00000088 <clawGrip>:
	RIGHT_WHEEL_VALUE = speed_right;
}

//Makes the claw grip
void clawGrip() {
	CLAW_VALUE = 5;	
  88:	85 e0       	ldi	r24, 0x05	; 5
  8a:	8c bf       	out	0x3c, r24	; 60
  8c:	08 95       	ret

0000008e <clawRelease>:
}

//Makes the claw release its grip
void clawRelease() {
	CLAW_VALUE = 11;
  8e:	8b e0       	ldi	r24, 0x0B	; 11
  90:	8c bf       	out	0x3c, r24	; 60
  92:	08 95       	ret

00000094 <clawEnable>:
}

void clawEnable() {
	CLAW_TIMER |= (1<<COM01);
  94:	83 b7       	in	r24, 0x33	; 51
  96:	80 62       	ori	r24, 0x20	; 32
  98:	83 bf       	out	0x33, r24	; 51
  9a:	08 95       	ret

0000009c <clawDisable>:
}

void clawDisable() {
	CLAW_TIMER &= ~(1<<COM01);
  9c:	83 b7       	in	r24, 0x33	; 51
  9e:	8f 7d       	andi	r24, 0xDF	; 223
  a0:	83 bf       	out	0x33, r24	; 51
  a2:	08 95       	ret

000000a4 <SPI_Init>:
// Pins handling wheel direction
#define WHEEL_DIRECTION_L PORTA0
#define WHEEL_DIRECTION_R PORTA1

void SPI_Init(void){
	DDR_SPI = (1<<SPI_MISO);		// Set MISO output
  a4:	80 e4       	ldi	r24, 0x40	; 64
  a6:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE);				// Enable SPI
  a8:	8d b9       	out	0x0d, r24	; 13
	SPCR = (1>>SPIE);				// Enable interrupts
  aa:	1d b8       	out	0x0d, r1	; 13
  ac:	08 95       	ret

000000ae <releaseClaw>:
	setSpeeds(leftspeed, rightspeed);				// The implementation of pwm() can handle separate speeds for both sides
	return;
}

void releaseClaw() {
	clawEnable();
  ae:	0e 94 4a 00 	call	0x94	; 0x94 <clawEnable>
	clawRelease();
  b2:	0e 94 47 00 	call	0x8e	; 0x8e <clawRelease>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	82 e5       	ldi	r24, 0x52	; 82
  ba:	97 e0       	ldi	r25, 0x07	; 7
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <releaseClaw+0xe>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <releaseClaw+0x18>
  c6:	00 00       	nop
	_delay_ms(300);
	clawDisable();
  c8:	0e 94 4e 00 	call	0x9c	; 0x9c <clawDisable>
  cc:	08 95       	ret

000000ce <gripClaw>:
}

void gripClaw() {
	clawEnable();
  ce:	0e 94 4a 00 	call	0x94	; 0x94 <clawEnable>
	clawGrip();	
  d2:	0e 94 44 00 	call	0x88	; 0x88 <clawGrip>
  d6:	08 95       	ret

000000d8 <main>:
}

// Receiving and sending could be done by the same function but this seem clearer to me

int main(void) {
	SPI_Init();						// Initiate SPI as a slaves
  d8:	0e 94 52 00 	call	0xa4	; 0xa4 <SPI_Init>
	init_pwm();
  dc:	0e 94 36 00 	call	0x6c	; 0x6c <init_pwm>
	//softTurn(255,127);	
	while(1) {
		gripClaw();
  e0:	0e 94 67 00 	call	0xce	; 0xce <gripClaw>
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	88 e0       	ldi	r24, 0x08	; 8
  e8:	9d e3       	ldi	r25, 0x3D	; 61
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x12>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x1c>
  f4:	00 00       	nop
		_delay_ms(2500);
		releaseClaw();
  f6:	0e 94 57 00 	call	0xae	; 0xae <releaseClaw>
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	84 e3       	ldi	r24, 0x34	; 52
  fe:	9c e0       	ldi	r25, 0x0C	; 12
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x28>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x32>
 10a:	00 00       	nop
 10c:	e9 cf       	rjmp	.-46     	; 0xe0 <main+0x8>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
