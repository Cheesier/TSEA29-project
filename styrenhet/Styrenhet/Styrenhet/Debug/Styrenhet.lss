
Styrenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000b8  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000044d  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000187  00000000  00000000  00000645  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000289  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000138  00000000  00000000  00000a58  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000022b  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000130  00000000  00000000  00000dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000098  00000000  00000000  00000eeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_pwm>:
//	Controls TEH CLAW
//	WGM decides the pwm mode			| WGM00 & WGM01 => fast pwm
//	CS sets the prescaler				| CS02 & CS00 => CLK/1024
//	COM sets the compare output mode	| COM01 => Clear OC0 on match, set on BOTTOM
/************************************************************************/
CLAW_TIMER |= (1 << WGM00) | (1 << WGM01) | (1 << CS02) | (1 << CS00);
  6c:	83 b7       	in	r24, 0x33	; 51
  6e:	8d 64       	ori	r24, 0x4D	; 77
  70:	83 bf       	out	0x33, r24	; 51
DDRB |= (1 << PORTB3); //sets OC0 as output
  72:	bb 9a       	sbi	0x17, 3	; 23
//	Controls the wheel servos
//	WGM decides the pwm	mode			| WGM10 & WGM12 => fast pwm, 8-bit
//	CS sets the prescaler				| CS12 & CS10 => CLK/1024
//	COM sets the compare output mode	| COM1A1 & COM1B1 => Clear OC1A:B on match, set on BOTTOM
/************************************************************************/
WHEEL_TIMER_A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
  74:	8f b5       	in	r24, 0x2f	; 47
  76:	81 6a       	ori	r24, 0xA1	; 161
  78:	8f bd       	out	0x2f, r24	; 47
WHEEL_TIMER_B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
  7a:	8e b5       	in	r24, 0x2e	; 46
  7c:	8d 60       	ori	r24, 0x0D	; 13
  7e:	8e bd       	out	0x2e, r24	; 46
DDRD |= (1 << PORTD4) | (1 << PORTD5); //sets 0C1A:B as outputs	
  80:	81 b3       	in	r24, 0x11	; 17
  82:	80 63       	ori	r24, 0x30	; 48
  84:	81 bb       	out	0x11, r24	; 17
  86:	08 95       	ret

00000088 <setSpeeds>:
	RIGHT_WHEEL_VALUE = speed;	
}

//Sets the duty cycle of the left motors to speed_left and the right motors to speed_right
void setSpeeds(int speed_left, int speed_right) {	
	LEFT_WHEEL_VALUE = speed_left;	
  88:	8a bd       	out	0x2a, r24	; 42
	RIGHT_WHEEL_VALUE = speed_right;
  8a:	68 bd       	out	0x28, r22	; 40
  8c:	08 95       	ret

0000008e <SPI_Init>:

// Pin handling CLAW
#define CLAW_CONTROL PORTB3

void SPI_Init(void){
	DDR_SPI = (1<<SPI_MISO);		// Set MISO output
  8e:	80 e4       	ldi	r24, 0x40	; 64
  90:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE);				// Enable SPI
  92:	8d b9       	out	0x0d, r24	; 13
	SPCR = (1>>SPIE);				// Enable interrupts
  94:	1d b8       	out	0x0d, r1	; 13
  96:	08 95       	ret

00000098 <softTurn>:
	setSpeed(speed);
	return;
}

void softTurn(int leftspeed, int rightspeed) {
	PORTA |= (1<<WHEEL_DIRECTION_L);
  98:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA |= (1<<WHEEL_DIRECTION_R);
  9a:	d9 9a       	sbi	0x1b, 1	; 27
	setSpeeds(leftspeed, rightspeed);				// The implementation of pwm() can handle separate speeds for both sides
  9c:	0e 94 44 00 	call	0x88	; 0x88 <setSpeeds>
  a0:	08 95       	ret

000000a2 <main>:
}

// Receiving and sending could be done by the same function but this seem clearer to me

int main(void) {
	SPI_Init();						// Initiate SPI as a slaves
  a2:	0e 94 47 00 	call	0x8e	; 0x8e <SPI_Init>
	init_pwm();
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <init_pwm>
	while(1) {
		softTurn(255, 127);
  aa:	6f e7       	ldi	r22, 0x7F	; 127
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 4c 00 	call	0x98	; 0x98 <softTurn>
  b6:	f9 cf       	rjmp	.-14     	; 0xaa <main+0x8>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
