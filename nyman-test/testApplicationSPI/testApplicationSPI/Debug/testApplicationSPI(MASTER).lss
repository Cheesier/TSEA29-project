
testApplicationSPI(MASTER).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000210  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000013c  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001dd  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000044  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001e1  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a9  00000000  00000000  000008cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  00000976  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	25 d0       	rcall	.+74     	; 0xac <main>
  62:	30 c0       	rjmp	.+96     	; 0xc4 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <initSPI>:


void initSPI()
{
	/* Set MOSI SCK and /SS output*/
	DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7);
  66:	80 eb       	ldi	r24, 0xB0	; 176
  68:	87 bb       	out	0x17, r24	; 23
	/* SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  6a:	81 e5       	ldi	r24, 0x51	; 81
  6c:	8d b9       	out	0x0d, r24	; 13
	SPDR = 0;
  6e:	1f b8       	out	0x0f, r1	; 15
  70:	08 95       	ret

00000072 <getSensorData>:
}

void getSensorData()
{
	uint8_t i = 1;
	SPDR = (1<<7)|(1<<6)|(0<<5)|(1<<4)|(1<<3)|(0<<2)|(1<<1)|(1<<0);
  72:	8b ed       	ldi	r24, 0xDB	; 219
  74:	8f b9       	out	0x0f, r24	; 15
	PORTB &= ~(1<<PORTB4);
  76:	c4 98       	cbi	0x18, 4	; 24
	while(!(SPSR & (1<<SPIF)));
  78:	77 9b       	sbis	0x0e, 7	; 14
  7a:	fe cf       	rjmp	.-4      	; 0x78 <getSensorData+0x6>
	PORTB |= (1<<PORTB4);
  7c:	c4 9a       	sbi	0x18, 4	; 24
	
	uint8_t noSensors = SPDR;
  7e:	2f b1       	in	r18, 0x0f	; 15
	for (; i <= noSensors; i++)
  80:	22 23       	and	r18, r18
  82:	99 f0       	breq	.+38     	; 0xaa <getSensorData+0x38>
	SPDR = 0;
}

void getSensorData()
{
	uint8_t i = 1;
  84:	81 e0       	ldi	r24, 0x01	; 1
	PORTB |= (1<<PORTB4);
	
	uint8_t noSensors = SPDR;
	for (; i <= noSensors; i++)
	{
		if (SPDR == 15)
  86:	9f b1       	in	r25, 0x0f	; 15
  88:	9f 30       	cpi	r25, 0x0F	; 15
  8a:	21 f4       	brne	.+8      	; 0x94 <getSensorData+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	90 e5       	ldi	r25, 0x50	; 80
  8e:	9a 95       	dec	r25
  90:	f1 f7       	brne	.-4      	; 0x8e <getSensorData+0x1c>
  92:	03 c0       	rjmp	.+6      	; 0x9a <getSensorData+0x28>
  94:	98 e2       	ldi	r25, 0x28	; 40
  96:	9a 95       	dec	r25
  98:	f1 f7       	brne	.-4      	; 0x96 <getSensorData+0x24>
		else
		{
			_delay_us(15);
		}
		
		SPDR = i;
  9a:	8f b9       	out	0x0f, r24	; 15
		PORTB &= ~(1<<PORTB4);
  9c:	c4 98       	cbi	0x18, 4	; 24
		while(!(SPSR & (1<<SPIF)));
  9e:	77 9b       	sbis	0x0e, 7	; 14
  a0:	fe cf       	rjmp	.-4      	; 0x9e <getSensorData+0x2c>
		PORTB |= (1<<PORTB4);
  a2:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &= ~(1<<PORTB4);
	while(!(SPSR & (1<<SPIF)));
	PORTB |= (1<<PORTB4);
	
	uint8_t noSensors = SPDR;
	for (; i <= noSensors; i++)
  a4:	8f 5f       	subi	r24, 0xFF	; 255
  a6:	28 17       	cp	r18, r24
  a8:	70 f7       	brcc	.-36     	; 0x86 <getSensorData+0x14>
  aa:	08 95       	ret

000000ac <main>:
	}
}

int main(void)
{
	initSPI();
  ac:	dc df       	rcall	.-72     	; 0x66 <initSPI>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	89 e6       	ldi	r24, 0x69	; 105
  b2:	98 e1       	ldi	r25, 0x18	; 24
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x8>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x12>
  be:	00 00       	nop
    while(1)
    {
		_delay_ms(1000);
		getSensorData();
  c0:	d8 df       	rcall	.-80     	; 0x72 <getSensorData>
  c2:	f5 cf       	rjmp	.-22     	; 0xae <main+0x2>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
