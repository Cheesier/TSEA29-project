
pwm_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001fd  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000010e  00000000  00000000  0000038f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b6  00000000  00000000  0000049d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000074  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001c1  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000038  00000000  00000000  00000889  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_pwm>:
//	Controls TEH CLAW
//	WGM decides the pwm mode			| WGM00 & WGM01 => fast pwm
//	CS sets the prescaler				| CS02 & CS00 => CLK/1024
//	COM sets the compare output mode	| COM01 => Clear OC0 on match, set on BOTTOM
/************************************************************************/
CLAW_TIMER |= (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS02) | (1 << CS00);
  6c:	83 b7       	in	r24, 0x33	; 51
  6e:	8d 66       	ori	r24, 0x6D	; 109
  70:	83 bf       	out	0x33, r24	; 51
DDRB |= (1 << PORTB3); //sets OC0 as output
  72:	bb 9a       	sbi	0x17, 3	; 23
//	Controls the wheel servos
//	WGM decides the pwm	mode			| WGM10 & WGM12 => fast pwm, 8-bit
//	CS sets the prescaler				| CS12 & CS10 => CLK/1024
//	COM sets the compare output mode	| COM1A1 & COM1B1 => Clear OC1A:B on match, set on BOTTOM
/************************************************************************/
WHEEL_TIMER_A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
  74:	8f b5       	in	r24, 0x2f	; 47
  76:	81 6a       	ori	r24, 0xA1	; 161
  78:	8f bd       	out	0x2f, r24	; 47
WHEEL_TIMER_B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
  7a:	8e b5       	in	r24, 0x2e	; 46
  7c:	8d 60       	ori	r24, 0x0D	; 13
  7e:	8e bd       	out	0x2e, r24	; 46
DDRD |= (1 << PORTD4) | (1 << PORTD5); //sets 0C1A:B as outputs	
  80:	81 b3       	in	r24, 0x11	; 17
  82:	80 63       	ori	r24, 0x30	; 48
  84:	81 bb       	out	0x11, r24	; 17
  86:	08 95       	ret

00000088 <main>:
void claw_release(){
	CLAW_VALUE = 13;
}

int main(void){	
	init_pwm();
  88:	0e 94 36 00 	call	0x6c	; 0x6c <init_pwm>
	
	
	while(1){
		CLAW_VALUE = 13;
  8c:	9d e0       	ldi	r25, 0x0D	; 13
		LEFT_WHEEL_VALUE = 13;
		RIGHT_WHEEL_VALUE = 13;
		
		_delay_ms(4000);
		
		CLAW_VALUE = 6;
  8e:	86 e0       	ldi	r24, 0x06	; 6
int main(void){	
	init_pwm();
	
	
	while(1){
		CLAW_VALUE = 13;
  90:	9c bf       	out	0x3c, r25	; 60
		LEFT_WHEEL_VALUE = 13;
  92:	9a bd       	out	0x2a, r25	; 42
		RIGHT_WHEEL_VALUE = 13;
  94:	98 bd       	out	0x28, r25	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	37 ea       	ldi	r19, 0xA7	; 167
  9a:	41 e6       	ldi	r20, 0x61	; 97
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	30 40       	sbci	r19, 0x00	; 0
  a0:	40 40       	sbci	r20, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x14>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x1e>
  a6:	00 00       	nop
		
		_delay_ms(4000);
		
		CLAW_VALUE = 6;
  a8:	8c bf       	out	0x3c, r24	; 60
		LEFT_WHEEL_VALUE = 6;
  aa:	8a bd       	out	0x2a, r24	; 42
		RIGHT_WHEEL_VALUE = 6;		
  ac:	88 bd       	out	0x28, r24	; 40
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	37 ea       	ldi	r19, 0xA7	; 167
  b2:	41 e6       	ldi	r20, 0x61	; 97
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	30 40       	sbci	r19, 0x00	; 0
  b8:	40 40       	sbci	r20, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x2c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x36>
  be:	00 00       	nop
  c0:	e7 cf       	rjmp	.-50     	; 0x90 <main+0x8>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
